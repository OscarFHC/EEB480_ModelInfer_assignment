acast(y,b~variable) -> a1; a1
class(a1); dim(a1)
acast(y,a~b~variable) -> a2; a2
class(a2); dim(a2)
library(reshape2)
x <- data.frame(a=letters[1:10],b=1:10,
c=sample(LETTERS[1:3],10,replace=TRUE),d=sample(1:10,10,replace=T))
x
melt(x,id.vars=c("a","b"))
melt(x,measure.vars=c("c","d")) -> y; y
dcast(y,a+b~variable) -> d1; d1
class(d1)
dcast(y,a+b~variable) -> d1; d1
class(d1)
acast(y,b~variable) -> a1; a1
class(a1); dim(a1)
acast(y,a~b~variable) -> a2; a2
class(a2); dim(a2)
install.packages("plyr")
install.packages("plyr")
library(plyr)
library(plyr)
x <- data.frame(a=letters[1:10],b=runif(10),c=sample(LETTERS[1:3],10,replace=TRUE))
arrange(x,a,b,c)
arrange(x,b,c,a)
arrange(x,c,b,a)
course.url <- "http://kinglab.eeb.lsa.umich.edu/480"
read.csv(file.path(course.url,"data/energy_production.csv"),comment="#") -> energy
arrange(energy,region,source,year)
arrange(energy,-TJ,year)
head(arrange(energy,region,source,year))
head(arrange(energy,-TJ,year))
head(energy)
x
arrange(x,b,c,a)
?arrange
x <- expand.grid(a=1:3,b=1:5)
y <- expand.grid(a=1:2,b=1:5,c=factor(c("F","G")))
m1 <- merge(x,y); m1
m2 <- merge(x,y,by='a'); m2
m3 <- merge(x,y,all=TRUE); m3
m4 <- merge(x,y,by='a',all=TRUE); m4
x
y
m1
join(x,y,by=c('a','b'),type='left')
join(x,y,by=c('a','b'),type='right')
View(x)
View(y)
View(x)
join(x,y,by=c('a','b'),type='inner')
x <- expand.grid(a=1:3,b=1:5,d=7:9)
y <- expand.grid(a=1:2,b=1:5,c=factor(c("F","G")))
join(x,y,by=c('a','b'),type='right')
join(x,y,by=c('a','b'),type='full')
### Here, we only need ggplot2 to make figures and tidyr and dplyr to reorganize the data into the desired form
library(ggplot2)
library(tidyr)
library(dplyr)
### load the data
data(iris)
### resape the data
iris.new = iris %>%
gather(key = flower_att, value = measurement, Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
iris.SW.setosa = iris.new %>% filter(flower_att=="Sepal.Width" & Species=="setosa")
ggplot(df, aes(x=x)) +
geom_histogram(aes(y = ..density..), binwidth=density(df$x)$bw) +
geom_density(fill="red", alpha = 0.2) +
theme_bw() +
xlab('') +
ylab('')
ggplot(df, aes(x=x)) +
geom_histogram(aes(y = ..density..), binwidth=density(df$x)$bw) +
theme_bw() +
xlab('') +
ylab('')
ggplot(data=iris.SW.setosa,
mapping=aes(x=measurement))+
geom_histogram(aes(y=..density..),
bins=10)
ggplot(data=iris.SW.setosa,
mapping=aes(x=measurement))+
geom_histogram(aes(y=..density..),
bandwidth=density(measurement)$bw)
ggplot(data=iris.SW.setosa,
mapping=aes(x=measurement))+
geom_histogram(aes(y=..density..),
bandwidth=density(iris.SW.setosa$measurement)$bw)
ggplot(data=iris.SW.setosa,
mapping=aes(x=measurement))+
geom_histogram(aes(y=..density..),
binwidth=density(iris.SW.setosa$measurement)$bw)
ggplot(data=iris.SW.setosa,
mapping=aes(x=measurement))+
geom_histogram(aes(y=..density..),
bins=10)
ggplot(data=iris.SW.setosa,
mapping=aes(x=measurement))+
geom_histogram(aes(y=..density..),
bins=10)+geom_density(fill="red", alpha = 0.2)
ggplot(data=iris.SW.setosa,
mapping=aes(x=measurement))+
geom_histogram(aes(y=..density..),
binwidth=density(iris.SW.setosa$measurement)$bw)+geom_density(fill="red", alpha = 0.2)
density(iris.SW.setosa$measurement)
density(iris.SW.setosa$measurement)$bw
?density
require(graphics)
plot(density(c(-20, rep(0,98), 20)), xlim = c(-4, 4))
density(c(-20, rep(0,98), 20))$bw
density(c(-20, rep(0,98), 20))
c(-20, rep(0,98), 20)
p.SW.setosa = ggplot(data=iris.SW.setosa,
mapping=aes(x=measurement))+
geom_histogram(aes(y=..density..),
binwidth = density(density(iris.SW.setosa$measurement)$bw))
print(p.SW.setosa)
ggplot(data=iris.SW.setosa,
mapping=aes(x=measurement))+
geom_histogram(aes(y=..density..),
binwidth = density(iris.SW.setosa$measurement)$bw)
ggplot(data=iris.SW.setosa,
mapping=aes(x=measurement))+
geom_histogram(aes(y=..density..),
binwidth = density(iris.SW.setosa$measurement)$bw)+
geom_density(col="red")
ggplot(data=iris.new,
mapping = aes(measurement, col=Species, fill=Species),
group = interaction(Species, flower_att))+
geom_histogram(aes(y=..density..),
bins = 100)+
geom_density(col="black")+
facet_grid(Species~flower_att)
ggplot(data=iris.new,
mapping = aes(measurement, col=Species, fill=Species),
group = interaction(Species, flower_att))+
geom_histogram(aes(y=..density..),
bins = 1000)+
geom_density(col="black")+
facet_grid(Species~flower_att)
ggplot(data=iris.new,
mapping = aes(measurement, col=Species, fill=Species),
group = interaction(Species, flower_att))+
geom_histogram(aes(y=..density..),
bins = 100)+
geom_density(col="black")+
facet_grid(Species~flower_att)
p.all = ggplot(data=iris.new,
mapping = aes(measurement, col=Species, fill=Species),
group = interaction(Species, flower_att))+
geom_histogram(aes(y=..density..),
binwidth=0.02)+
geom_density(col="black")+
facet_grid(Species~flower_att)
print(p.all)
p.all = ggplot(data=iris.new,
mapping = aes(measurement, col=Species, fill=Species),
group = interaction(Species, flower_att))+
geom_histogram(aes(y=..density..),
binwidth=0.05)+
geom_density(col="black")+
facet_grid(Species~flower_att)
print(p.all)
p.all = ggplot(data=iris.new,
mapping = aes(measurement, col=Species, fill=Species),
group = interaction(Species, flower_att))+
geom_histogram(aes(y=..density..),
binwidth=0.08)+
geom_density(col="black")+
facet_grid(Species~flower_att)
print(p.all)
View(iris.new)
p.aov = ggplot(data = iris, mapping = aes(x=Species, y=Sepal.Width))+
geom_boxplot()+
geom_jitter()
print(p.aov)
### try another dataset and different
data(mtcars)
data(mpg)
head(mpg)
head(mtcars)
View(mpg)
mpg$manufacturer
class(mpg)
str(mpg)
iris.PW.seto = iris.new %>% filter(flower_att=="Petal.Width" & Species=="setosa")
p.PW.seto = ggplot(data=iris.PW.seto,
mapping=aes(measurement, ..count..))+
geom_histogram(aes(y=..count..),
bins=10)
print(p.PW.seto)
shapiro.test(iris.PW.seto$measurement)
shapiro.test(log(iris.PW.seto$measurement))
qqnorm(iris.PW.seto$measurement); qqline(iris.PW.seto$measurement, col = 2)
qqnorm(log(iris.PW.seto$measurement)); qqline(log(iris.PW.seto$measurement), col = 2)
library(ggplot2)
library(dplyr)
library(tidyr)
library(plyr)
library(reshape2)
setwd("D:/Courses/UM/2016_WN/EEB480_modelinfer/20160926/Assignment 5 Exercise in Data Visualization")
AL_SP = read.csv(file="MLB_AL_SP_1986_2016.csv", header = TRUE, sep=",", fill=TRUE)
str(AL_SP)
head(AL_SP)
AL_SP = AL_SP %>% arrange(Season, Team, Name)
head(AL_SP)
ALSP.all = AL_SP %>%
filter(IP>1 & GS>1)
ALSP.all2 = AL_SP %>%
subset(IP>1 & GS>1)
allSP = length(unique(ALSP.all$Name))
allSP
ALSP.all.long = ALSP.all %>%
gather(key=stats, value=val, W, L, G, GS, IP, K9, BB9, HR9, BABIP, LOB, HRFB, FIP, WAR, WHIP, ERA, Age)
ALSP.all.long2 = ALSP.all %>%
melt(id.vars=colnames(ALSP.all)[1:3], variable.name="stats", value.name="val")
# melt seems to be more convenient as it can take the output from "colnames" directly
ALSP.all.long2$stats=as.character(ALSP.all.long2$stats)
# Beacuse melt function makes the variables (names as stats here) into factor, so I'll have to transform it
# into character for comparing the two dataframe.
all_equal(target=ALSP.all.long, current=ALSP.all.long2)
small50IP = AL_SP %>%
filter(IP<50) %>%
mutate(WL = W/L, IP.id="<50 IP")
large50IP = AL_SP %>%
filter(IP>50 & IP<100) %>%
mutate(WL = W/L, IP.id="50-100 IP")
large100IP = AL_SP %>%
filter(IP>100) %>%
mutate(WL = W/L, IP.id=">100IP")
ALSP.WL = rbind(small50IP, large50IP, large100IP) %>%
filter(WL>=0)%>%
select(Season, Name, IP, IP.id, WL)
ggplot(data=ALSP.WL,
aes(x=IP, y=WL, color=IP.id),
group=IP.id)+
geom_point()+
xlab("Inning Pitched (IP)")+
ylab("Win-Loss ratio")+
guides(guide_legend(titel="IP group"))
ALSP. = rbind(small50IP, large50IP, large100IP) %>%
filter(WL>=0)%>%
select(Season, Name, IP, IP.id, WL, ERA, FIP)
View(ALSP.)
View(ALSP.all)
ALSP.IPeffects = rbind(small50IP, large50IP, large100IP) %>%
filter(WL>=0)%>%
select(Season, Name, IP, IP.id, WL, ERA, FIP, WHIP, WAR)
ggplot(data=ALSP.IPeffects,
aes(x=IP, y=ERA, color=IP.id),
group=IP.id)+
geom_point()+
xlab("Inning Pitched (IP)")+
ylab("ERA")+
guides(guide_legend(titel="IP group"))
ggplot(data=ALSP.IPeffects,
aes(x=IP, y=ERA, color=IP.id),
group=IP.id)+
geom_point()+
scale_y_continuous(limits = c(0, 10))+
xlab("Inning Pitched (IP)")+
ylab("ERA")+
guides(guide_legend(titel="IP group"))
ggplot(data=ALSP.IPeffects,
aes(x=IP, y=FIP, color=IP.id),
group=IP.id)+
geom_point()
ggplot(data=ALSP.IPeffects,
aes(x=IP, y=FIP, color=IP.id),
group=IP.id)+
geom_point()+
scale_y_continuous(limits = c(0, 10))+
xlab("Inning Pitched (IP)")+
ylab("ERA")+
guides(guide_legend(titel="IP group"))
ggplot(data=ALSP.IPeffects,
aes(x=IP, y=WHIP, color=IP.id),
group=IP.id)+
geom_point()+
scale_y_continuous(limits = c(0, 10))+
xlab("Inning Pitched (IP)")+
ylab("WHIP")+
guides(guide_legend(titel="IP group"))
ggplot(data=ALSP.IPeffects,
aes(x=IP, y=WAR, color=IP.id),
group=IP.id)+
geom_point()
options(stringsAsFactors=FALSE)
course.url <- "http://kinglab.eeb.lsa.umich.edu/480"
dat <- read.csv(paste0(course.url,"/data/galapagos.csv"),comment='#')
head(dat)
?paste0
paste0(1:12, c("st", "nd", "rd", rep("th", 9)))
paste(1:12, c("st", "nd", "rd", rep("th", 9)))
pairs(~species+endemics+area+elevation+nearest+scruz+adjacent,data=dat)
## ------------------------------------------------------------------------
plot(species~endemics,data=dat)
abline(a=0,b=1)
#'
#' Note that a pairs-plot is the default plot method for a data frame.
#' Thus, we could have produced the above by `plot(dat)`.
#'
## ------------------------------------------------------------------------
lm1 <- lm(species~area+elevation+nearest,data=dat)
summary(lm1)
ggplot(data=ALSP.IPeffects,
aes(x=IP, y=WHIP, color=IP.id),
group=IP.id)+
geom_point()+
scale_y_continuous(limits = c(0, 10))+
xlab("Inning Pitched (IP)")+
ylab("WHIP")+
guides(guide_legend(titel="IP group"))
ggplot(data=ALSP.IPeffects,
aes(x=IP, y=WHIP, fill=IP.id),
group=IP.id)+
geom_point()+
scale_y_continuous(limits = c(0, 10))+
xlab("Inning Pitched (IP)")+
ylab("WHIP")+
guides(guide_legend(titel="IP group"))
X <- model.matrix(lm1); X
head(dat)
library(magrittr)
library(plyr)
dat %<>% mutate(prox=factor(mapvalues(nearest<5,from=c(TRUE,FALSE),to=c("near","far"))),
height=cut(elevation,breaks=c(0,500,1000,Inf),ordered=TRUE,right=FALSE))
head(dat)
str(dat)
model.matrix(species~area,data=dat)
model.matrix(species~area-1,data=dat)
model.matrix(species~prox,data=dat)
model.matrix(species~area^2,data=dat)
model.matrix(species~area,data=dat)
model.matrix(species~prox:area,data=dat)
model.matrix(species~prox+area+prox:area,data=dat)
View(dat)
lm2 <- lm(species~area+elevation+adjacent,data=dat)
summary(lm2)
dat %<>% mutate(dat,diff=area-adjacent)
lm3 <- lm(species~area+elevation+adjacent+diff,data=dat)
summary(lm3)
print(try(solve(crossprod(X))))
eigen(crossprod(X))$values
dat %<>% mutate(diff=diff+rnorm(30,sd=0.001))
lm4 <- lm(species~area+elevation+adjacent+diff,data=dat)
summary(lm4)
f = function(x){
y=-(x+3)^2 + runif(length(x), min=-2, max=2)
#print(y)
}
x=seq(from=-6, to=0, by =0.005)
f(x)
f = function(x){
y=-(x+3)^2 + runif(length(x), min=-2, max=2)
#print(y)
}
x=seq(from=-6, to=0, by =0.005)
y=f(x)
y
set.seed(15165)
f = function(x){
y=-(x+3)^2 + runif(length(x), min=-2, max=2)
#print(y)
}
x=seq(from=-6, to=0, by =0.005)
y=f(x)
y
set.seed(15165)
f = function(x){
y=-(x+3)^2 + runif(length(x), min=-2, max=2)
#print(y)
}
x=seq(from=-6, to=0, by =0.5)
y=f(x)
y
set.seed(15165)
f = function(x){
y=-(x+3)^2 + runif(length(x), min=-2, max=2)
#print(y)
}
x=seq(from=-6, to=0, by =0.5)
y=f(x)
y
set.seed(15165)
f = function(x){
y=-(x+3)^2 + runif(length(x), min=-2, max=2)
#print(y)
}
f1 = function(x){
y=runif(length(x), min=min(x), max=max(x))
}
x=seq(from=-6, to=0, by =0.005)
y1=f(x)
y2=f1(x)
head(y1, 20)
head(y2, 20)
set.seed(15165)
f = function(x){
y=-(x+3)^2 + runif(length(x), min=-2, max=2)
#print(y)
}
f1 = function(x){
y=runif(length(x), min=min(x), max=max(x))
}
x=seq(from=-6, to=0, by =0.005)
y1=f(x)
y2=f1(x)
cor(y1, x)
cor(y2, x)
plot(y1, x)
plot(y2, x)
plot(y1~x)
plot(y2~x)
plot(y1~x)
abline(lm(y1~x))
plot(y2~x)
abline(lm(y2~x))
duration = faithful$eruptions   # eruption durations
waiting = faithful$waiting      # the waiting period
cor(duration, waiting)
sd(duration)
sd(waiting)
plot(duration~waiting)
data("airquality")
head(airquality, 15)
lm(Temp~Wind, data=airquality)
summary(mod)
mod = lm(Temp~Wind, data=airquality)
summary(mod)
anova(mod)
sqrt(71.27)
anova(mod)$[2,3]
anova(mod)$Response[2,3]
?anova
str(anova(mod))
anova(mod)$Mean Sq[2]
anova(mod)$MeanSq[2]
anova(mod)$MeanSq
anova(mod)$"Mean Sq"[2]
plot(mod)
plot(Temp~Wind, data=airquality)
plot(Temp~Wind, data=airquality)
abline(lm(Temp~Wind, data=airquality), col="red")
str(summary(mod))
res = residuals(mod)
SSE = sum(res^2)
SSE/151
SSE/summary(mod)$df[2]
RMSE = SSE/153
anova(mod)
MSE = SSE/summary(mod)$df[2]
MSE
cor(airquality$Temp, airquality$Wind)
(cor(airquality$Temp, airquality$Wind))^2
scale_y_sqrt
library(RCurl)
library(plyr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(gridExtra)
library(lmtest)
dat1_raw=read.csv(text=getURL("https://raw.githubusercontent.com/OscarFHC/EEB480_ModelInfer_assignment/master/Mod_Infer_hw6/Parus_major_Wytham_Wood.csv"), sep=",", header=T,comment.char="#")
dat2_raw=read.csv(text=getURL("https://raw.githubusercontent.com/OscarFHC/EEB480_ModelInfer_assignment/master/Mod_Infer_hw6/Thrips_imaginis_Davidson1948.csv"), sep=",", header=T,comment.char="#")
parus = dat1_raw %>%
rename(yr=Sample.Date, pop.nat=Population)
thrip = dat2_raw %>%
mutate(yr=Sample.Date%/%1,
month=round(100*(Sample.Date%%1)),
time=yr+month/12,
pop.nat=Population,
Population=NULL,
Sample.Date=NULL)
parus.ex1 = parus %>%
mutate(pop.sqrt=sqrt(pop.nat), pop.log=log(pop.nat)) %>%
gather(key=variable, value=pop, -c(yr))
parus.ex1[,"variable"]=factor(parus.ex1[,"variable"], levels=c("pop.nat", "pop.sqrt", "pop.log"))
if (require(ggplot2movies)) {
m <- ggplot(subset(movies, votes > 1000), aes(rating, votes)) +
geom_point(na.rm = TRUE)
m
}
m <- ggplot(subset(movies, votes > 1000), aes(rating, votes)) +
geom_point(na.rm = TRUE)
m
ggplot(data=parus.ex1, aes(x=yr, y=pop), group=gp)+
geom_line()+
scale_y_sqrt()
View(parus.ex1)
View(parus)
ggplot(data=parus, aes(x=yr, y=pop.nat))+
geom_line()+
scale_y_sqrt()
ggplot(data=parus.ex1, aes(x=yr, y=pop), group=gp)+
geom_line()+
facet_grid(variable ~ ., scales = "free_y")+
xlab("year")+
ylab("per capita population size")
ggplot(data=parus, aes(x=yr, y=pop.nat))+
geom_line()
ggplot(data=parus, aes(x=yr, y=pop.nat))+
geom_line()+
scale_y_sqrt()
ggplot(data=parus, aes(x=yr, y=pop.nat))+
geom_line()+
scale_y_continuous(trans=log2_trans())
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
library(scales)
