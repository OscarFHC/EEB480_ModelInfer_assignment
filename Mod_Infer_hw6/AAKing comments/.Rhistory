parus.ex2 = parus  %>%
mutate(pop.log=log(pop.nat)) %>%
mutate(ratio=c(log(parus[,"pop.nat"][2:nrow(parus)]/parus[,"pop.nat"][1:(nrow(parus)-1)]), "NA")) %>%
filter(ratio!="NA") %>%
mutate(ratio=as.numeric(ratio))
p1= ggplot(data=parus.ex2, aes(x=pop.nat, y=ratio))+
geom_point()+
labs(x="arithmetic population size", y="")+
ylim(-0.65, 0.65)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"))
p2= ggplot(data=parus.ex2, aes(x=pop.log, y=ratio))+
geom_point()+
labs(x="log population size", y="")+
ylim(-0.65, 0.65)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"))
grid.arrange(p1, p2, ncol=1, left=textGrob("log population growth rate", rot=90, vjust=2))
# Chunk 6
thrip.ex2 = thrip  %>%
mutate(pop.log=log(pop.nat)) %>%
mutate(ratio=c(log(thrip[,"pop.nat"][2:nrow(thrip)]/thrip[,"pop.nat"][1:(nrow(thrip)-1)]), "NA")) %>%
filter(ratio!="NA") %>%
mutate(ratio=as.numeric(ratio))
p1= ggplot(data=thrip.ex2, aes(x=pop.nat, y=ratio))+
geom_point()+
labs(x="arithmetic population size", y="")+
ylim(-3.2, 3.2)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"))
p2= ggplot(data=thrip.ex2, aes(x=pop.log, y=ratio))+
geom_point()+
labs(x="log population size", y="")+
ylim(-3.2, 3.2)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"))
grid.arrange(p1, p2, ncol=1, left=textGrob("log population growth rate", rot=90, vjust=2))
# Chunk 7
parus.lm.ricker=lm(ratio~pop.nat, data=parus.ex2)
parus.r.ricker=parus.lm.ricker$coefficients[1]
parus.K.ricker=-(parus.lm.ricker$coefficients[1]/parus.lm.ricker$coefficients[2])
parus.lm.gomp=lm(ratio~pop.log, data=parus.ex2)
parus.r.gomp=-log(-parus.lm.gomp$coefficients[2])
parus.K.gomp=exp(parus.lm.gomp$coefficients[1]/-(parus.lm.gomp$coefficients[2]))
# Chunk 8
thrip.lm.ricker=lm(ratio~pop.nat, data=thrip.ex2)
thrip.r.ricker=thrip.lm.ricker$coefficients[1]
thrip.K.ricker=-(thrip.lm.ricker$coefficients[1]/thrip.lm.ricker$coefficients[2])
thrip.lm.gomp=lm(ratio~pop.log, data=thrip.ex2)
thrip.r.gomp=-log(-thrip.lm.gomp$coefficients[2])
thrip.K.gomp=exp(thrip.lm.gomp$coefficients[1]/-(thrip.lm.gomp$coefficients[2]))
# Chunk 9
parus.ex2 = parus.ex2  %>%
mutate(rick.fit=predict(parus.lm.ricker), gomp.fit=predict(parus.lm.gomp))
p1= ggplot(data=parus.ex2)+
geom_point(aes(x=pop.nat, y=ratio), col="black")+
geom_line(aes(x=pop.nat, y=rick.fit), col="blue")+
labs(x="arithmatic population size", y="")+
ylim(-0.65, 0.65)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"))
p2= ggplot(data=parus.ex2, aes(x=pop.nat, y=ratio))+
geom_point(aes(x=pop.log, y=ratio), col="black")+
geom_line(aes(x=pop.log, y=gomp.fit), col="blue")+
labs(x="log population size", y="")+
ylim(-0.65, 0.65)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"))
grid.arrange(p1, p2, ncol=1, left=textGrob("log population growth rate", rot=90, vjust=2))
# Chunk 10
thrip.ex2 = thrip.ex2  %>%
mutate(rick.fit=predict(thrip.lm.ricker), gomp.fit=predict(thrip.lm.gomp))
p1= ggplot(data=thrip.ex2)+
geom_point(aes(x=pop.nat, y=ratio), col="black")+
geom_line(aes(x=pop.nat, y=rick.fit), col="blue")+
labs(x="arithmatic population size", y="")+
ylim(-3.2, 3.2)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"))
p2= ggplot(data=thrip.ex2, aes(x=pop.nat, y=ratio))+
geom_point(aes(x=pop.log, y=ratio), col="black")+
geom_line(aes(x=pop.log, y=gomp.fit), col="blue")+
labs(x="log population size", y="")+
ylim(-3.2, 3.2)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"))
grid.arrange(p1, p2, ncol=1, left=textGrob("log population growth rate", rot=90, vjust=2))
# Chunk 11
summary(parus.lm.ricker)
anova(parus.lm.ricker)
# Chunk 12
confint(parus.lm.ricker, level=0.95)
confint(parus.lm.ricker, level=0.90)
confint(parus.lm.ricker, level=0.80)
confint(parus.lm.ricker, level=0.60)
ggplot(data=parus.ex2,aes(x=pop.nat, y=ratio))+
geom_point(col="black")+
geom_line(aes(x=pop.nat, y=rick.fit), col="blue")+
stat_smooth(method="lm", level=0.95)+
stat_smooth(method="lm", level=0.90)+
stat_smooth(method="lm", level=0.80)+
stat_smooth(method="lm", level=0.60)+
labs(x="arithmatic population size", y="")+
ylim(-1, 0.65)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"))
# Chunk 14
B.rick = summary(parus.lm.ricker)$coefficients[,1]
vcovB.rick = vcov(parus.lm.ricker) # variance-covariance matrix of the linear model (Ricker model)
theta.rick = function(M){ # transformation function from coefficients to theta (carrying capacity in this case)
theta1 = M[1]
theta2 = -(M[1]/M[2])
c(theta1, theta2)
}
#install.packages("numDeriv")
# Here I installed a package to calculate the Jacobian matrix evaluated at the beta = beta hat
library(numDeriv)
se.rick = sqrt(diag( jacobian(theta.rick, B.rick) %*% vcovB.rick %*% t(jacobian(theta.rick, B.rick)) ))
se.rick
# Chunk 15
library(msm)
se.rick3 = c(deltamethod(~ x1, coef(parus.lm.ricker), vcov(parus.lm.ricker)), deltamethod(~ -(x1/x2), coef(parus.lm.ricker), vcov(parus.lm.ricker)))
se.rick3
# Chunk 16
B.gomp = summary(parus.lm.gomp)$coefficients[,1]
vcovB.gomp = vcov(parus.lm.gomp) # variance-covariance matrix of the linear model (Ricker model)
Jacb.gomp = function(Beta){
f1 = c(0, -1/Beta[2])
f2 = c(exp(-Beta[1]/Beta[2])*(-1/Beta[2]), exp(-Beta[1]/Beta[2])*(Beta[1]/(Beta[2]^2)))
as.matrix(rbind(f1, f2))
}
se.gomp = sqrt(diag( Jacb.gomp(B.gomp) %*% vcovB.gomp %*% t(Jacb.gomp(B.gomp)) ))
# Chunk 17
parus.lm.ricker=lm(ratio~pop.nat, data=parus.ex2)
#summary(parus.lm.ricker)
SST.r = var(parus.ex2[,"ratio"])*(nrow(parus.ex2)-1)
SSR.r = sum(residuals(parus.lm.ricker)^2)
R2.r = 1-(SSR.r/SST.r)
R2.r.adj = 1-(SSR.r/(nrow(parus.ex2)-2))/(SST.r/(nrow(parus.ex2)-1))
# Chunk 18
parus.lm.gomp=lm(ratio~pop.log, data=parus.ex2)
#summary(parus.lm.gomp)
SST.g = var(parus.ex2[,"ratio"])*(nrow(parus.ex2)-1)
SSR.g = sum(residuals(parus.lm.gomp)^2)
R2.g = 1-(SSR.g/SST.g)
R2.g.adj = 1-(SSR.g/(nrow(parus.ex2)-2))/(SST.g/(nrow(parus.ex2)-1))
# Chunk 19
thrip.lm.ricker=lm(ratio~pop.nat, data=thrip.ex2)
SST.r = var(thrip.ex2[,"ratio"])*(nrow(thrip.ex2)-1)
SSR.r = sum(residuals(thrip.lm.ricker)^2)
R2.r = 1-(SSR.r/SST.r)
R2.r.adj = 1-(SSR.r/(nrow(thrip.ex2)-2))/(SST.r/(nrow(thrip.ex2)-1))
# Chunk 20
thrip.lm.gomp=lm(ratio~pop.log, data=thrip.ex2)
SST.g = var(thrip.ex2[,"ratio"])*(nrow(thrip.ex2)-1)
SSR.g = sum(residuals(thrip.lm.gomp)^2)
R2.g = 1-(SSR.g/SST.g)
R2.g.adj = 1-(SSR.g/(nrow(thrip.ex2)-2))/(SST.g/(nrow(thrip.ex2)-1))
# Chunk 21
acf(thrip.ex2$pop.log, main="autocorrelation plot of population density")
acf(thrip.ex2$ratio, main="autocorrelation plot of growth rate")
thrip.ex2[,"month"]=as.factor(thrip.ex2[,"month"])
thrip.lm.gomp=lm(ratio~pop.log, data=thrip.ex2)
summary(thrip.lm.gomp)
thrip.season1.gomp = lm(ratio~pop.log + pop.log:month, data=thrip.ex2)
summary(thrip.season1.gomp)
thrip.season2.gomp = lm(ratio~pop.log + month, data=thrip.ex2)
summary(thrip.season2.gomp)
thrip.season3.gomp = lm(ratio~pop.log + pop.log*month, data=thrip.ex2)
summary(thrip.season3.gomp)
anova(thrip.lm.gomp, thrip.season2.gomp, thrip.season3.gomp)
anova(thrip.lm.gomp, thrip.season1.gomp, thrip.season3.gomp)
anova(thrip.lm.gomp, thrip.season1.gomp)[1,2]
anova(thrip.lm.gomp, thrip.season2.gomp)[1,2]
anova(thrip.lm.gomp, thrip.season2.gomp)[1,3]
anova(thrip.lm.gomp, thrip.season2.gomp, thrip.season3.gomp)
[1,3]
anova(thrip.lm.gomp, thrip.season2.gomp, thrip.season3.gomp)[1,3]
anova(thrip.lm.gomp, thrip.season2.gomp, thrip.season3.gomp)[2,2]
anova(thrip.lm.gomp, thrip.season2.gomp, thrip.season3.gomp)[3,2]
anova(thrip.lm.gomp, thrip.season1.gomp, thrip.season3.gomp)[3,2]
anova(thrip.lm.gomp, thrip.season1.gomp, thrip.season3.gomp)[2,2]
anova(thrip.season.gomp)
anova(thrip.season1.gomp)
anova(thrip.season11.gomp)[,2]
anova(thrip.season1.gomp)[,2]
# Chunk 1
library(RCurl)
library(plyr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(grid)
library(gridExtra)
library(lmtest)
library(scales)
dat1_raw=read.csv(text=getURL("https://raw.githubusercontent.com/OscarFHC/EEB480_ModelInfer_assignment/master/Mod_Infer_hw6/Parus_major_Wytham_Wood.csv"), sep=",", header=T,comment.char="#")
dat2_raw=read.csv(text=getURL("https://raw.githubusercontent.com/OscarFHC/EEB480_ModelInfer_assignment/master/Mod_Infer_hw6/Thrips_imaginis_Davidson1948.csv"), sep=",", header=T,comment.char="#")
parus = dat1_raw %>%
rename(yr=Sample.Date, pop.nat=Population)
thrip = dat2_raw %>%
mutate(yr=Sample.Date%/%1,
month=round(100*(Sample.Date%%1)),
time=yr+month/12,
pop.nat=Population,
Population=NULL,
Sample.Date=NULL)
# Chunk 2
parus.nat = ggplot(data=parus, aes(x=yr, y=pop.nat))+
geom_line()+
scale_y_continuous()+
labs(x="year", y="arithmetic \n population size")
parus.sqrt = ggplot(data=parus, aes(x=yr, y=pop.nat))+
geom_line()+
scale_y_continuous(trans="sqrt")+
labs(x="year", y="squared root of \n population size")
parus.log = ggplot(data=parus, aes(x=yr, y=pop.nat))+
geom_line()+
scale_y_continuous(trans="log")+
labs(x="year", y="log population size")
grid.arrange(parus.nat, parus.sqrt, parus.log, ncol=1)
thrip.nat = ggplot(data=thrip, aes(x=time, y=pop.nat))+
geom_line()+
scale_y_continuous()+
labs(x="year", y="arithmetic \n population size")
thrip.sqrt = ggplot(data=thrip, aes(x=time, y=pop.nat))+
geom_line()+
scale_y_continuous(trans="sqrt")+
labs(x="year", y="squared root of \n population size")
thrip.log = ggplot(data=thrip, aes(x=time, y=pop.nat))+
geom_line()+
scale_y_continuous(trans="log")+
labs(x="year", y="log population size")
grid.arrange(thrip.nat, thrip.sqrt, thrip.log, ncol=1)
# Chunk 3
list(parus=parus,thrips=thrip) %>%
ldply(.id='dataset') %>%
ddply(~dataset,summarize,range=diff(range(log10(pop.nat))))
# Chunk 4
parus.ex2 = parus  %>%
mutate(pop.log=log(pop.nat)) %>%
mutate(ratio=c(log(parus[,"pop.nat"][2:nrow(parus)]/parus[,"pop.nat"][1:(nrow(parus)-1)]), "NA")) %>%
filter(ratio!="NA") %>%
mutate(ratio=as.numeric(ratio))
# Chunk 5
parus.ex2 = parus  %>%
mutate(pop.log=log(pop.nat)) %>%
mutate(ratio=c(log(parus[,"pop.nat"][2:nrow(parus)]/parus[,"pop.nat"][1:(nrow(parus)-1)]), "NA")) %>%
filter(ratio!="NA") %>%
mutate(ratio=as.numeric(ratio))
p1= ggplot(data=parus.ex2, aes(x=pop.nat, y=ratio))+
geom_point()+
labs(x="arithmetic population size", y="")+
ylim(-0.65, 0.65)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"))
p2= ggplot(data=parus.ex2, aes(x=pop.log, y=ratio))+
geom_point()+
labs(x="log population size", y="")+
ylim(-0.65, 0.65)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"))
grid.arrange(p1, p2, ncol=1, left=textGrob("log population growth rate", rot=90, vjust=2))
# Chunk 6
thrip.ex2 = thrip  %>%
mutate(pop.log=log(pop.nat)) %>%
mutate(ratio=c(log(thrip[,"pop.nat"][2:nrow(thrip)]/thrip[,"pop.nat"][1:(nrow(thrip)-1)]), "NA")) %>%
filter(ratio!="NA") %>%
mutate(ratio=as.numeric(ratio))
p1= ggplot(data=thrip.ex2, aes(x=pop.nat, y=ratio))+
geom_point()+
labs(x="arithmetic population size", y="")+
ylim(-3.2, 3.2)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"))
p2= ggplot(data=thrip.ex2, aes(x=pop.log, y=ratio))+
geom_point()+
labs(x="log population size", y="")+
ylim(-3.2, 3.2)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"))
grid.arrange(p1, p2, ncol=1, left=textGrob("log population growth rate", rot=90, vjust=2))
# Chunk 7
parus.lm.ricker=lm(ratio~pop.nat, data=parus.ex2)
parus.r.ricker=parus.lm.ricker$coefficients[1]
parus.K.ricker=-(parus.lm.ricker$coefficients[1]/parus.lm.ricker$coefficients[2])
parus.lm.gomp=lm(ratio~pop.log, data=parus.ex2)
parus.r.gomp=-log(-parus.lm.gomp$coefficients[2])
parus.K.gomp=exp(parus.lm.gomp$coefficients[1]/-(parus.lm.gomp$coefficients[2]))
# Chunk 8
thrip.lm.ricker=lm(ratio~pop.nat, data=thrip.ex2)
thrip.r.ricker=thrip.lm.ricker$coefficients[1]
thrip.K.ricker=-(thrip.lm.ricker$coefficients[1]/thrip.lm.ricker$coefficients[2])
thrip.lm.gomp=lm(ratio~pop.log, data=thrip.ex2)
thrip.r.gomp=-log(-thrip.lm.gomp$coefficients[2])
thrip.K.gomp=exp(thrip.lm.gomp$coefficients[1]/-(thrip.lm.gomp$coefficients[2]))
# Chunk 9
parus.ex2 = parus.ex2  %>%
mutate(rick.fit=predict(parus.lm.ricker), gomp.fit=predict(parus.lm.gomp))
p1= ggplot(data=parus.ex2)+
geom_point(aes(x=pop.nat, y=ratio), col="black")+
geom_line(aes(x=pop.nat, y=rick.fit), col="blue")+
labs(x="arithmatic population size", y="")+
ylim(-0.65, 0.65)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"))
p2= ggplot(data=parus.ex2, aes(x=pop.nat, y=ratio))+
geom_point(aes(x=pop.log, y=ratio), col="black")+
geom_line(aes(x=pop.log, y=gomp.fit), col="blue")+
labs(x="log population size", y="")+
ylim(-0.65, 0.65)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"))
grid.arrange(p1, p2, ncol=1, left=textGrob("log population growth rate", rot=90, vjust=2))
# Chunk 10
thrip.ex2 = thrip.ex2  %>%
mutate(rick.fit=predict(thrip.lm.ricker), gomp.fit=predict(thrip.lm.gomp))
p1= ggplot(data=thrip.ex2)+
geom_point(aes(x=pop.nat, y=ratio), col="black")+
geom_line(aes(x=pop.nat, y=rick.fit), col="blue")+
labs(x="arithmatic population size", y="")+
ylim(-3.2, 3.2)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"))
p2= ggplot(data=thrip.ex2, aes(x=pop.nat, y=ratio))+
geom_point(aes(x=pop.log, y=ratio), col="black")+
geom_line(aes(x=pop.log, y=gomp.fit), col="blue")+
labs(x="log population size", y="")+
ylim(-3.2, 3.2)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"))
grid.arrange(p1, p2, ncol=1, left=textGrob("log population growth rate", rot=90, vjust=2))
# Chunk 11
summary(parus.lm.ricker)
anova(parus.lm.ricker)
# Chunk 12
confint(parus.lm.ricker, level=0.95)
confint(parus.lm.ricker, level=0.90)
confint(parus.lm.ricker, level=0.80)
confint(parus.lm.ricker, level=0.60)
ggplot(data=parus.ex2,aes(x=pop.nat, y=ratio))+
geom_point(col="black")+
geom_line(aes(x=pop.nat, y=rick.fit), col="blue")+
stat_smooth(method="lm", level=0.95)+
stat_smooth(method="lm", level=0.90)+
stat_smooth(method="lm", level=0.80)+
stat_smooth(method="lm", level=0.60)+
labs(x="arithmatic population size", y="")+
ylim(-1, 0.65)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"))
# Chunk 14
B.rick = summary(parus.lm.ricker)$coefficients[,1]
vcovB.rick = vcov(parus.lm.ricker) # variance-covariance matrix of the linear model (Ricker model)
theta.rick = function(M){ # transformation function from coefficients to theta (carrying capacity in this case)
theta1 = M[1]
theta2 = -(M[1]/M[2])
c(theta1, theta2)
}
#install.packages("numDeriv")
# Here I installed a package to calculate the Jacobian matrix evaluated at the beta = beta hat
library(numDeriv)
se.rick = sqrt(diag( jacobian(theta.rick, B.rick) %*% vcovB.rick %*% t(jacobian(theta.rick, B.rick)) ))
se.rick
# Chunk 15
library(msm)
se.rick3 = c(deltamethod(~ x1, coef(parus.lm.ricker), vcov(parus.lm.ricker)), deltamethod(~ -(x1/x2), coef(parus.lm.ricker), vcov(parus.lm.ricker)))
se.rick3
# Chunk 16
B.gomp = summary(parus.lm.gomp)$coefficients[,1]
vcovB.gomp = vcov(parus.lm.gomp) # variance-covariance matrix of the linear model (Ricker model)
Jacb.gomp = function(Beta){
f1 = c(0, -1/Beta[2])
f2 = c(exp(-Beta[1]/Beta[2])*(-1/Beta[2]), exp(-Beta[1]/Beta[2])*(Beta[1]/(Beta[2]^2)))
as.matrix(rbind(f1, f2))
}
se.gomp = sqrt(diag( Jacb.gomp(B.gomp) %*% vcovB.gomp %*% t(Jacb.gomp(B.gomp)) ))
# Chunk 17
parus.lm.ricker=lm(ratio~pop.nat, data=parus.ex2)
#summary(parus.lm.ricker)
SST.r = var(parus.ex2[,"ratio"])*(nrow(parus.ex2)-1)
SSR.r = sum(residuals(parus.lm.ricker)^2)
R2.r = 1-(SSR.r/SST.r)
R2.r.adj = 1-(SSR.r/(nrow(parus.ex2)-2))/(SST.r/(nrow(parus.ex2)-1))
# Chunk 18
parus.lm.gomp=lm(ratio~pop.log, data=parus.ex2)
#summary(parus.lm.gomp)
SST.g = var(parus.ex2[,"ratio"])*(nrow(parus.ex2)-1)
SSR.g = sum(residuals(parus.lm.gomp)^2)
R2.g = 1-(SSR.g/SST.g)
R2.g.adj = 1-(SSR.g/(nrow(parus.ex2)-2))/(SST.g/(nrow(parus.ex2)-1))
# Chunk 19
thrip.lm.ricker=lm(ratio~pop.nat, data=thrip.ex2)
SST.r = var(thrip.ex2[,"ratio"])*(nrow(thrip.ex2)-1)
SSR.r = sum(residuals(thrip.lm.ricker)^2)
R2.r = 1-(SSR.r/SST.r)
R2.r.adj = 1-(SSR.r/(nrow(thrip.ex2)-2))/(SST.r/(nrow(thrip.ex2)-1))
# Chunk 20
thrip.lm.gomp=lm(ratio~pop.log, data=thrip.ex2)
SST.g = var(thrip.ex2[,"ratio"])*(nrow(thrip.ex2)-1)
SSR.g = sum(residuals(thrip.lm.gomp)^2)
R2.g = 1-(SSR.g/SST.g)
R2.g.adj = 1-(SSR.g/(nrow(thrip.ex2)-2))/(SST.g/(nrow(thrip.ex2)-1))
# Chunk 21
acf(thrip.ex2$pop.log, main="autocorrelation plot of population density")
acf(thrip.ex2$ratio, main="autocorrelation plot of growth rate")
# Chunk 22
thrip.ex2[,"month"]=as.factor(thrip.ex2[,"month"])
thrip.lm.gomp=lm(ratio~pop.log, data=thrip.ex2)
summary(thrip.lm.gomp)
thrip.season1.gomp = lm(ratio~pop.log + pop.log:month, data=thrip.ex2)
summary(thrip.season1.gomp)
thrip.season2.gomp = lm(ratio~pop.log + month, data=thrip.ex2)
summary(thrip.season2.gomp)
thrip.season3.gomp = lm(ratio~pop.log + pop.log*month, data=thrip.ex2)
summary(thrip.season3.gomp)
# Chunk 23
anova(thrip.lm.gomp, thrip.season1.gomp, thrip.season3.gomp)
anova(thrip.lm.gomp, thrip.season2.gomp, thrip.season3.gomp)
# Chunk 24
library(nlme)
mod.lme = lme(ratio~pop.log,data=thrip.ex2,random=~1|month)
#summary(mod_lme)
sum((thrip.ex2[,"ratio"] - predict(mod.lme))^2)
sum((thrip.ex2[,"ratio"] - predict(thrip.season.gomp))^2)
AIC(mod.lme)
AIC(thrip.season.gomp)
# Chunk 25
thrip.season.gomp1 = lm(ratio~1:month + pop.log + pop.log:month, data=thrip.ex2)
summary(thrip.season.gomp1)
# Chunk 26
plot(parus.lm.gomp)
qqnorm(residuals(parus.lm.gomp))
qqline(residuals(parus.lm.gomp), col="red")
# Chunk 28
dwtest(parus.lm.gomp)
# Chunk 29
summary(parus.lm.gomp)
library(msm)
parus.r.se = deltamethod(~ -log(-x2), coef(parus.lm.gomp), vcov(parus.lm.gomp))
parus.K.se = deltamethod(~ exp(x1/-(x2)), coef(parus.lm.gomp), vcov(parus.lm.gomp))
install.packages("numDeriv")
install.packages("msm")
plot(thrip.season.gomp)
bptest(thrip.season.gomp)
plot(thrip.season3.gomp)
dwtest(thrip.season3.gomp)
summary(thrip.season3.gomp)
library(msm)
thrip.r.se = deltamethod(~ -log(-x2), coef(thrip.season3.gomp), vcov(thrip.season3.gomp))
thrip.K.se = deltamethod(~ exp(x1/-(x2)), coef(thrip.season3.gomp), vcov(thrip.season3.gomp))
thrip.r.se
thrip.K.se
bptest(thrip.season3.gomp)
shapiro.test(residuals(thrip.season3.gomp))
summary(thrip.season2.gomp)
install.packages("bblme")
install.packages("bbmle")
