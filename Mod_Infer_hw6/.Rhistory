library(RCurl)
library(plyr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(gridExtra)
dat1_raw=read.csv(text=getURL("https://raw.githubusercontent.com/OscarFHC/EEB480_ModelInfer_assignment/master/Mod_Infer_hw6/Parus_major_Wytham_Wood.csv"), sep=",", header=T,comment.char="#")
dat2_raw=read.csv(text=getURL("https://raw.githubusercontent.com/OscarFHC/EEB480_ModelInfer_assignment/master/Mod_Infer_hw6/Thrips_imaginis_Davidson1948.csv"), sep=",", header=T,comment.char="#")
parus = dat1_raw %>%
rename(yr=Sample.Date, pop.nat=Population)
thrip = dat2_raw %>%
mutate(yr=Sample.Date%/%1,
month=round(100*(Sample.Date%%1)),
time=yr+month/12,
pop.nat=Population,
Population=NULL,
Sample.Date=NULL)
parus.ex1 = parus %>%
mutate(pop.sqrt=sqrt(pop.nat), pop.log=log(pop.nat)) %>%
gather(key=variable, value=pop, -c(yr))
parus.ex1[,"variable"]=factor(parus.ex1[,"variable"], levels=c("pop.nat", "pop.sqrt", "pop.log"))
ggplot(data=parus.ex1, aes(x=yr, y=pop), group=gp)+
geom_line()+
facet_grid(variable ~ ., scales = "free_y")+
xlab("year")+
ylab("per capita population size")
thrip.ex1 = thrip %>%
mutate(pop.sqrt=sqrt(pop.nat), pop.log=log(pop.nat)) %>%
gather(key=variable, value=pop, -c(yr, month, time))
thrip.ex1[,"variable"]=factor(thrip.ex1[,"variable"], levels=c("pop.nat", "pop.sqrt", "pop.log"))
ggplot(data=thrip.ex1, aes(x=time, y=pop), group=variable)+
geom_line()+
facet_grid(variable ~ ., scales = "free_y")+
xlab("year")+
ylab("per capita population size")
# Question: not sure how to organize the format of date? Like what should I do if I want to make the label of x=axis as 1934 Mar., etc
parus.ex2 = parus  %>%
mutate(pop.log=log(pop.nat)) %>%
mutate(ratio=c(log(parus[,"pop.nat"][2:nrow(parus)]/parus[,"pop.nat"][1:(nrow(parus)-1)]), "NA")) %>%
filter(ratio!="NA") %>%
gather(key=variable, value=pop, -c(yr, ratio))
ggplot(data=parus.ex2, aes(x=pop, y=as.numeric(ratio)), group=variable)+
geom_point()+
facet_wrap(~variable, nrow=2, scales="free")+
#facet_grid(variable~., scales = "free")+ #this is not working
xlab("population size")+
ylab("per capita population growth rate")
thrip.ex2 = thrip  %>%
mutate(pop.log=log(pop.nat)) %>%
mutate(ratio=c(log(thrip[,"pop.nat"][2:nrow(thrip)]/thrip[,"pop.nat"][1:(nrow(thrip)-1)]), "NA")) %>%
filter(ratio!="NA") %>%
gather(key=variable, value=pop, -c(yr, month, time, ratio))
ggplot(data=thrip.ex2, aes(x=pop, y=as.numeric(ratio)), group=variable)+
geom_point()+
facet_wrap(~variable, nrow=2, scales="free")+
#facet_grid(variable~., scales = "free")+ #this works
#facet_grid(.~variable, scales = "free")+ #this is not working..
xlab("population size")+
ylab("per capita population growth rate")
# Question: why "acet_grid(variable~., scales = "free")" does not give me free x and y scale?
parus.ex3 = parus  %>%
mutate(pop.log=log(pop.nat)) %>%
mutate(ratio=c(log(parus[,"pop.nat"][2:nrow(parus)]/parus[,"pop.nat"][1:(nrow(parus)-1)]), "NA")) %>%
filter(ratio!="NA")
parus.lm.ricker=lm(ratio~pop.nat, data=parus.ex3)
summary(parus.lm.ricker)
AIC(parus.lm.ricker)
parus.r.ricker=parus.lm.ricker$coefficients[1]
parus.K.ricker=-(parus.lm.ricker$coefficients[1]/parus.lm.ricker$coefficients[2])
parus.lm.gomp=lm(ratio~pop.log, data=parus.ex3)
summary(parus.lm.gomp)
AIC(parus.lm.gomp)
parus.r.gomp=-log(-parus.lm.gomp$coefficients[2])
parus.K.gomp=exp(parus.lm.gomp$coefficients[1]/-(parus.lm.gomp$coefficients[2]))
thrip.ex3 = thrip  %>%
mutate(pop.log=log(pop.nat)) %>%
mutate(ratio=c(log(thrip[,"pop.nat"][2:nrow(thrip)]/thrip[,"pop.nat"][1:(nrow(thrip)-1)]), "NA")) %>%
filter(ratio!="NA")
thrip.lm.ricker=lm(ratio~pop.nat, data=thrip.ex3)
summary(thrip.lm.ricker)
AIC(thrip.lm.ricker)
thrip.r.ricker=thrip.lm.ricker$coefficients[1]
thrip.K.ricker=-(thrip.lm.ricker$coefficients[1]/thrip.lm.ricker$coefficients[2])
thrip.lm.gomp=lm(ratio~pop.log, data=thrip.ex3)
summary(thrip.lm.gomp)
AIC(thrip.lm.gomp)
thrip.r.gomp=-log(-thrip.lm.gomp$coefficients[2])
thrip.K.gomp=exp(thrip.lm.gomp$coefficients[1]/-(thrip.lm.gomp$coefficients[2]))
parus.ex5 = parus.ex3  %>%
gather(key=variable, value=pop, -c(yr, ratio)) %>%
mutate(fit.ratio=c(predict(parus.lm.ricker), predict(parus.lm.gomp)))
ggplot(data=parus.ex5, group=variable)+
geom_point(aes(x=pop, y=as.numeric(ratio)), col="black")+
geom_line(aes(x=pop, y=as.numeric(fit.ratio)), col="blue")+
facet_wrap(~variable, nrow=2, scales="free")+
xlab("population size")+
ylab("population growth rate")
thrip.ex5 = thrip.ex3  %>%
gather(key=variable, value=pop, -c(yr, month, time, ratio)) %>%
mutate(fit.ratio=c(predict(thrip.lm.ricker), predict(thrip.lm.gomp)))
ggplot(data=thrip.ex5, group=variable)+
geom_point(aes(x=pop, y=as.numeric(ratio)), col="black")+
geom_line(aes(x=pop, y=as.numeric(fit.ratio)), col="blue")+
facet_wrap(~variable, nrow=2, scales="free")+
xlab("population size")+
ylab("population growth rate")
summary(parus.lm.ricker)
anova(parus.lm.ricker)
parus.ex7=parus.ex5 %>%
filter(variable=="pop.nat")
confint(parus.lm.ricker, level=0.95)
confint(parus.lm.ricker, level=0.90)
confint(parus.lm.ricker, level=0.80)
confint(parus.lm.ricker, level=0.60)
ggplot(data=parus.ex7, aes(x=pop, y=as.numeric(ratio)))+
geom_point(col="black")+
geom_line(aes(x=pop, y=as.numeric(fit.ratio)), col="blue")+
stat_smooth(method="lm", level=0.95)+
stat_smooth(method="lm", level=0.90)+
stat_smooth(method="lm", level=0.80)+
stat_smooth(method="lm", level=0.60)
parus.lm.ricker=lm(ratio~pop.nat, data=parus.ex3)
summary(parus.lm.ricker)
parus.r.ricker=parus.lm.ricker$coefficients[1]
parus.K.ricker=-(parus.lm.ricker$coefficients[1]/parus.lm.ricker$coefficients[2])
#X = model.matrix(parus.lm.ricker) # design matrix
#B = solve(crossprod(X), crossprod(X, parus.ex3$ratio))
# I can also calculate the Beta matrix by myself.
B = summary(parus.lm.ricker)$coefficients[,1]
vcovB = vcov(parus.lm.ricker) # variance-covariance matrix of the linear model (Ricker model)
# The variance is the square of the standard error as there is only one beta (sample size=1)
# I'm not entirely sure how the covariance is calculated...
fun2 = function(B){ # transformation function from coefficients to theta (carrying capacity in this case)
theta2 = -(B[1]/B[2])
}
#install.packages("numDeriv")
# Here I installed a package to calculate the Jacobian matrix evaluated at the beta = beta hat, although I can calculate it by hand
library(numDeriv)
K.se = sqrt(jacobian(fun2, B) %*% vcovB %*% t(jacobian(fun2, B)))
K.se
# The following package allows me to calculate the standard error of a parameter that is being transformed from the coefficients estimated in a model.
#install.packages("msm")
library(msm)
deltamethod(~ -(x1/x2), coef(parus.lm.ricker), vcov(parus.lm.ricker))
parus.lm.ricker=lm(ratio~pop.nat, data=parus.ex3)
parus.ricker.AIC = AIC(parus.lm.ricker)
parus.lm.gomp=lm(ratio~pop.log, data=parus.ex3)
parus.gomp.AIC = AIC(parus.lm.gomp)
prob = exp((parus.gomp.AIC - parus.ricker.AIC)/2)
thrip.ex3 = thrip  %>%
mutate(pop.log=log(pop.nat)) %>%
mutate(ratio=c(log(thrip[,"pop.nat"][2:nrow(thrip)]/thrip[,"pop.nat"][1:(nrow(thrip)-1)]), "NA")) %>%
filter(ratio!="NA")
thrip.ex3[,"ratio"] = as.numeric(thrip.ex3[,"ratio"])
thrip.lm.ricker=lm(ratio~pop.nat, data=thrip.ex3)
thrip.ricker.AIC = AIC(thrip.lm.ricker)
thrip.lm.gomp=lm(ratio~pop.log, data=thrip.ex3)
thrip.gomp.AIC = AIC(thrip.lm.gomp)
prob = exp((thrip.gomp.AIC - thrip.ricker.AIC)/2)
acf(thrip.ex3$pop.log)
acf(thrip.ex3$ratio)
i=1
thrip.ex10 = thrip.ex3 %>%
mutate(ratio.dese4 = ts(residuals(arima(thrip.ex3$ratio, c(4, 0, 1)))))
lm(ratio~pop.log + poly(month,i), data=thrip.ex10)
summary(lm(ratio~pop.log + poly(month,i), data=thrip.ex10))
adjR = c()
adjR.1 = c()
for (i in seq(1:12)) {
mod = lm(ratio~poly(pop.log,i), data=thrip.ex10)
mod.1 = lm(ratio.dese4~poly(pop.log,i), data=thrip.ex10)
adjR = c(adjR, summary(mod)$adj.r.square)
adjR.1 = c(adjR.1, summary(mod.1)$adj.r.square)
}
adjR
bestmod = lm(ratio~pop.log + poly(month,11), data=thrip.ex10)
plot(bestmod)
bptest(bestmod)
library(lmtest)
bptest(bestmod)
shapiro.test(residuals(bestmod))
shapiro.test(bestmod)
dwtest(bestmod)
hist(residuals(bestmod))
residuals(bestmod)
hist(residuals(bestmod), breaks=10)
hist(residuals(bestmod), breaks=20)
summary(lm(ratio~pop.log + poly(month,11), data=thrip.ex10))
summary(lm(ratio~pop.nat, data=parus.ex3))
summary(lm(ratio~pop.log, data=parus.ex3))
plot(parus.lm.gomp)
bptest(bestmod)
bptest(parus.lm.gomp)
bestmod
parus.lm.gomp
bptest(parus.lm.ricker)
parus.lm.ricker=lm(ratio~pop.nat, data=parus.ex3)
parus.ricker.AIC = AIC(parus.lm.ricker)
parus.lm.gomp=lm(ratio~pop.log, data=parus.ex3)
parus.gomp.AIC = AIC(parus.lm.gomp)
prob = exp((parus.gomp.AIC - parus.ricker.AIC)/2)
parus.gomp.AIC
parus.ricker.AIC
```{r, echo=FALSE}
r2 = summary(lm(ratio~pop.log + poly(month,11), data=thrip.ex10))$adj.r.square
```
From the figure we see that, in terms of adjust $R^2$, the model with 11 polynomial terms of month being the independent variable and non deseasoned growth rate being the dependent variables is the one giving me highest adjust $R^2$ (`r round(r2,3)`). However, having 11 polynomial terms is pretty hard to interpret.
plot(parus.lm.gomp)
# 30, 39, 78
#11.d
dwtest(parus.lm.gomp)
#11.e
summary(parus.lm.gomp)
shapiro.test(residuals(parus.lm.gomp))
dwtest(parus.lm.gomp)
