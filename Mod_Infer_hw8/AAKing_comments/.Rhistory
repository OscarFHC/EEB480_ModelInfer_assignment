# Chunk 1
library(RCurl)
library(plyr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(grid)
library(gridExtra)
library(lmtest)
library(scales)
dat1_raw=read.csv(text=getURL("https://raw.githubusercontent.com/OscarFHC/EEB480_ModelInfer_assignment/master/Mod_Infer_hw6/Parus_major_Wytham_Wood.csv"), sep=",", header=T,comment.char="#")
dat2_raw=read.csv(text=getURL("https://raw.githubusercontent.com/OscarFHC/EEB480_ModelInfer_assignment/master/Mod_Infer_hw6/Thrips_imaginis_Davidson1948.csv"), sep=",", header=T,comment.char="#")
parus = dat1_raw %>%
rename(yr=Sample.Date, pop.nat=Population)
thrip = dat2_raw %>%
mutate(yr=Sample.Date%/%1,
month=round(100*(Sample.Date%%1)),
time=yr+month/12,
pop.nat=Population,
Population=NULL,
Sample.Date=NULL)
# Chunk 2
parus.nat = ggplot(data=parus, aes(x=yr, y=pop.nat))+
geom_line()+
scale_y_continuous()+
labs(x="year", y="arithmetic \n population size")
parus.sqrt = ggplot(data=parus, aes(x=yr, y=pop.nat))+
geom_line()+
scale_y_continuous(trans="sqrt")+
labs(x="year", y="squared root of \n population size")
parus.log = ggplot(data=parus, aes(x=yr, y=pop.nat))+
geom_line()+
scale_y_continuous(trans="log")+
labs(x="year", y="log population size")
grid.arrange(parus.nat, parus.sqrt, parus.log, ncol=1)
thrip.nat = ggplot(data=thrip, aes(x=time, y=pop.nat))+
geom_line()+
scale_y_continuous()+
labs(x="year", y="arithmetic \n population size")
thrip.sqrt = ggplot(data=thrip, aes(x=time, y=pop.nat))+
geom_line()+
scale_y_continuous(trans="sqrt")+
labs(x="year", y="squared root of \n population size")
thrip.log = ggplot(data=thrip, aes(x=time, y=pop.nat))+
geom_line()+
scale_y_continuous(trans="log")+
labs(x="year", y="log population size")
grid.arrange(thrip.nat, thrip.sqrt, thrip.log, ncol=1)
# Chunk 3
list(parus=parus,thrips=thrip) %>%
ldply(.id='dataset') %>%
ddply(~dataset,summarize,range=diff(range(log10(pop.nat))))
# Chunk 4
parus.ex2 = parus  %>%
mutate(pop.log=log(pop.nat)) %>%
mutate(ratio=c(log(parus[,"pop.nat"][2:nrow(parus)]/parus[,"pop.nat"][1:(nrow(parus)-1)]), "NA")) %>%
filter(ratio!="NA") %>%
mutate(ratio=as.numeric(ratio))
# Chunk 5
parus.ex2 = parus  %>%
mutate(pop.log=log(pop.nat)) %>%
mutate(ratio=c(log(parus[,"pop.nat"][2:nrow(parus)]/parus[,"pop.nat"][1:(nrow(parus)-1)]), "NA")) %>%
filter(ratio!="NA") %>%
mutate(ratio=as.numeric(ratio))
p1= ggplot(data=parus.ex2, aes(x=pop.nat, y=ratio))+
geom_point()+
labs(x="arithmetic population size", y="")+
ylim(-0.65, 0.65)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"))
p2= ggplot(data=parus.ex2, aes(x=pop.log, y=ratio))+
geom_point()+
labs(x="log population size", y="")+
ylim(-0.65, 0.65)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"))
grid.arrange(p1, p2, ncol=1, left=textGrob("log population growth rate", rot=90, vjust=2))
# Chunk 6
thrip.ex2 = thrip  %>%
mutate(pop.log=log(pop.nat)) %>%
mutate(ratio=c(log(thrip[,"pop.nat"][2:nrow(thrip)]/thrip[,"pop.nat"][1:(nrow(thrip)-1)]), "NA")) %>%
filter(ratio!="NA") %>%
mutate(ratio=as.numeric(ratio))
p1= ggplot(data=thrip.ex2, aes(x=pop.nat, y=ratio))+
geom_point()+
labs(x="arithmetic population size", y="")+
ylim(-3.2, 3.2)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"))
p2= ggplot(data=thrip.ex2, aes(x=pop.log, y=ratio))+
geom_point()+
labs(x="log population size", y="")+
ylim(-3.2, 3.2)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"))
grid.arrange(p1, p2, ncol=1, left=textGrob("log population growth rate", rot=90, vjust=2))
# Chunk 7
parus.lm.ricker=lm(ratio~pop.nat, data=parus.ex2)
parus.r.ricker=parus.lm.ricker$coefficients[1]
parus.K.ricker=-(parus.lm.ricker$coefficients[1]/parus.lm.ricker$coefficients[2])
parus.lm.gomp=lm(ratio~pop.log, data=parus.ex2)
parus.r.gomp=-log(-parus.lm.gomp$coefficients[2])
parus.K.gomp=exp(parus.lm.gomp$coefficients[1]/-(parus.lm.gomp$coefficients[2]))
# Chunk 8
thrip.lm.ricker=lm(ratio~pop.nat, data=thrip.ex2)
thrip.r.ricker=thrip.lm.ricker$coefficients[1]
thrip.K.ricker=-(thrip.lm.ricker$coefficients[1]/thrip.lm.ricker$coefficients[2])
thrip.lm.gomp=lm(ratio~pop.log, data=thrip.ex2)
thrip.r.gomp=-log(-thrip.lm.gomp$coefficients[2])
thrip.K.gomp=exp(thrip.lm.gomp$coefficients[1]/-(thrip.lm.gomp$coefficients[2]))
# Chunk 9
parus.ex2 = parus.ex2  %>%
mutate(rick.fit=predict(parus.lm.ricker), gomp.fit=predict(parus.lm.gomp))
p1= ggplot(data=parus.ex2)+
geom_point(aes(x=pop.nat, y=ratio), col="black")+
geom_line(aes(x=pop.nat, y=rick.fit), col="blue")+
labs(x="arithmatic population size", y="")+
ylim(-0.65, 0.65)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"))
p2= ggplot(data=parus.ex2, aes(x=pop.nat, y=ratio))+
geom_point(aes(x=pop.log, y=ratio), col="black")+
geom_line(aes(x=pop.log, y=gomp.fit), col="blue")+
labs(x="log population size", y="")+
ylim(-0.65, 0.65)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"))
grid.arrange(p1, p2, ncol=1, left=textGrob("log population growth rate", rot=90, vjust=2))
# Chunk 10
thrip.ex2 = thrip.ex2  %>%
mutate(rick.fit=predict(thrip.lm.ricker), gomp.fit=predict(thrip.lm.gomp))
p1= ggplot(data=thrip.ex2)+
geom_point(aes(x=pop.nat, y=ratio), col="black")+
geom_line(aes(x=pop.nat, y=rick.fit), col="blue")+
labs(x="arithmatic population size", y="")+
ylim(-3.2, 3.2)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"))
p2= ggplot(data=thrip.ex2, aes(x=pop.nat, y=ratio))+
geom_point(aes(x=pop.log, y=ratio), col="black")+
geom_line(aes(x=pop.log, y=gomp.fit), col="blue")+
labs(x="log population size", y="")+
ylim(-3.2, 3.2)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"))
grid.arrange(p1, p2, ncol=1, left=textGrob("log population growth rate", rot=90, vjust=2))
# Chunk 11
summary(parus.lm.ricker)
anova(parus.lm.ricker)
# Chunk 12
confint(parus.lm.ricker, level=0.95)
confint(parus.lm.ricker, level=0.90)
confint(parus.lm.ricker, level=0.80)
confint(parus.lm.ricker, level=0.60)
ggplot(data=parus.ex2,aes(x=pop.nat, y=ratio))+
geom_point(col="black")+
geom_line(aes(x=pop.nat, y=rick.fit), col="blue")+
stat_smooth(method="lm", level=0.95)+
stat_smooth(method="lm", level=0.90)+
stat_smooth(method="lm", level=0.80)+
stat_smooth(method="lm", level=0.60)+
labs(x="arithmatic population size", y="")+
ylim(-1, 0.65)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"))
# Chunk 14
B.rick = summary(parus.lm.ricker)$coefficients[,1]
vcovB.rick = vcov(parus.lm.ricker) # variance-covariance matrix of the linear model (Ricker model)
theta.rick = function(M){ # transformation function from coefficients to theta (carrying capacity in this case)
theta1 = M[1]
theta2 = -(M[1]/M[2])
c(theta1, theta2)
}
#install.packages("numDeriv")
# Here I installed a package to calculate the Jacobian matrix evaluated at the beta = beta hat
library(numDeriv)
se.rick = sqrt(diag( jacobian(theta.rick, B.rick) %*% vcovB.rick %*% t(jacobian(theta.rick, B.rick)) ))
se.rick
# Chunk 15
library(msm)
se.rick3 = c(deltamethod(~ x1, coef(parus.lm.ricker), vcov(parus.lm.ricker)), deltamethod(~ -(x1/x2), coef(parus.lm.ricker), vcov(parus.lm.ricker)))
se.rick3
# Chunk 16
B.gomp = summary(parus.lm.gomp)$coefficients[,1]
vcovB.gomp = vcov(parus.lm.gomp) # variance-covariance matrix of the linear model (Ricker model)
Jacb.gomp = function(Beta){
f1 = c(0, -1/Beta[2])
f2 = c(exp(-Beta[1]/Beta[2])*(-1/Beta[2]), exp(-Beta[1]/Beta[2])*(Beta[1]/(Beta[2]^2)))
as.matrix(rbind(f1, f2))
}
se.gomp = sqrt(diag( Jacb.gomp(B.gomp) %*% vcovB.gomp %*% t(Jacb.gomp(B.gomp)) ))
# Chunk 17
parus.lm.ricker=lm(ratio~pop.nat, data=parus.ex2)
#summary(parus.lm.ricker)
SST.r = var(parus.ex2[,"ratio"])*(nrow(parus.ex2)-1)
SSR.r = sum(residuals(parus.lm.ricker)^2)
R2.r = 1-(SSR.r/SST.r)
R2.r.adj = 1-(SSR.r/(nrow(parus.ex2)-2))/(SST.r/(nrow(parus.ex2)-1))
# Chunk 18
parus.lm.gomp=lm(ratio~pop.log, data=parus.ex2)
#summary(parus.lm.gomp)
SST.g = var(parus.ex2[,"ratio"])*(nrow(parus.ex2)-1)
SSR.g = sum(residuals(parus.lm.gomp)^2)
R2.g = 1-(SSR.g/SST.g)
R2.g.adj = 1-(SSR.g/(nrow(parus.ex2)-2))/(SST.g/(nrow(parus.ex2)-1))
# Chunk 19
thrip.lm.ricker=lm(ratio~pop.nat, data=thrip.ex2)
SST.r = var(thrip.ex2[,"ratio"])*(nrow(thrip.ex2)-1)
SSR.r = sum(residuals(thrip.lm.ricker)^2)
R2.r = 1-(SSR.r/SST.r)
R2.r.adj = 1-(SSR.r/(nrow(thrip.ex2)-2))/(SST.r/(nrow(thrip.ex2)-1))
# Chunk 20
thrip.lm.gomp=lm(ratio~pop.log, data=thrip.ex2)
SST.g = var(thrip.ex2[,"ratio"])*(nrow(thrip.ex2)-1)
SSR.g = sum(residuals(thrip.lm.gomp)^2)
R2.g = 1-(SSR.g/SST.g)
R2.g.adj = 1-(SSR.g/(nrow(thrip.ex2)-2))/(SST.g/(nrow(thrip.ex2)-1))
# Chunk 21
acf(thrip.ex2$pop.log, main="autocorrelation plot of population density")
acf(thrip.ex2$ratio, main="autocorrelation plot of growth rate")
# Chunk 22
thrip.ex2[,"month"]=as.factor(thrip.ex2[,"month"])
thrip.lm.gomp=lm(ratio~pop.log, data=thrip.ex2)
summary(thrip.lm.gomp)
thrip.season1.gomp = lm(ratio~pop.log + pop.log:month, data=thrip.ex2)
summary(thrip.season1.gomp)
thrip.season2.gomp = lm(ratio~pop.log + month, data=thrip.ex2)
summary(thrip.season2.gomp)
thrip.season3.gomp = lm(ratio~pop.log + pop.log*month, data=thrip.ex2)
summary(thrip.season3.gomp)
anova(thrip.lm.gomp, thrip.season1.gomp, thrip.season2.gomp, thrip.season3.gomp)
anova(thrip.lm.gomp,thrip.season2.gomp, thrip.season3.gomp)
# Chunk 1
library(plyr)
library(reshape2)
library(magrittr)
library(ggplot2)
library(grid)
library(scales)
library(bbmle)
library(knitr)
theme_set(theme_bw())
# Chunk 2
gt = read.csv("http://kinglab.eeb.lsa.umich.edu/480/data/gophertortoise.csv",
comment.char="#",colClasses=c(date="Date",sex="factor",elisa="factor")) %>%
arrange(carapace.length,date)
gt1 = gt %>%
ddply(~id,subset,date==min(date)) %>%
mutate(serostatus=ifelse(elisa=="neg",0,1))
loglik = function (p, serostatus) {
sum(log(dbinom(x=serostatus,size=1,prob=p)))
}
nll = function (a, b, carapace.length, serostatus) {
-loglik(p=plogis(a+b*carapace.length),serostatus)
}
fit = mle2(nll,start=list(a=0,b=0),data=gt1)
params =
expand.grid(
a=seq(-9,-4,length=100),
b=seq(0.02,0.045,length=100)) %>%
ddply(~a+b,mutate,
loglik=-nll(a,b,gt1$carapace.length,gt1$serostatus)
)
breaks <- logLik(fit)-qchisq(p=c(0.5,0.8,0.9,0.95,0.99,0.999,0.9999),df=2)/2
ggplot(data=params, aes(x=a,y=b,z=loglik))+
stat_contour(aes(color=..level..),breaks=breaks)+
geom_point(x=coef(fit)["a"],y=coef(fit)["b"],shape=3)+
labs(color=expression(log(L)))+
geom_abline(slope=(coef(fit)["b"]/coef(fit)["a"]), intercept=0, col="red", size=1)+
theme_bw()+
theme(#panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"),
legend.key = element_blank())
# Chunk 3
L50 = -(coef(fit)["a"]/coef(fit)["b"])
loglik = function (p, serostatus) {
sum(log(dbinom(x=serostatus,size=1,prob=p)))
}
nll.1 = function (p0, p1, carapace.length, serostatus) {
-loglik(p=plogis(p0+p1*(carapace.length-L50)), serostatus)
}
fit.1 = mle2(nll.1, start=list(p0=0,p1=0),data=gt1)
params.1 =
expand.grid(
p0=seq(coef(fit.1)["p0"]-1.5, coef(fit.1)["p0"]+1.5, length=100),
p1=seq(coef(fit.1)["p1"]-0.15, coef(fit.1)["p1"]+0.15, length=100)) %>%
ddply(~p0+p1, mutate,
loglik=-nll.1(p0, p1, gt1$carapace.length, gt1$serostatus)
)
breaks.1 = logLik(fit.1)-qchisq(p=c(0.5,0.8,0.9,0.95,0.99,0.999,0.9999),df=2)/2
ggplot(data=params.1, aes(x=p0, y=p1, z=loglik))+
geom_contour(aes(color=..level..), breaks=breaks.1)+
geom_point(x=coef(fit.1)["p0"], y=coef(fit.1)["p1"], shape=3)+
labs(color=expression(log(L)))+
theme_bw()+
theme(#panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"),
legend.key = element_blank())
# Chunk 4
curve(1-exp(-(x*0.006)),from=0,to=350, ylab="cumulative probability", main="CDF of exponential distribution")
loglik = function (p, serostatus) {
sum(log(dbinom(x=serostatus,size=1,prob=p)))
}
nll.3 = function (rm, K, carapace.length, serostatus) {
ll <- -loglik(p= 1 - exp(-rm*K*(carapace.length/K - log(1+(carapace.length/K)))), serostatus)
if (!is.finite(ll)) print(c(rm,K,ll))
ll
}
rm=0.1
K=10
L=300
rm*(L -K*log(K+L))
fit.3 = mle2(nll.3, start=list(rm=0.1, K=10),data=gt1, trace=TRUE)
nll.3 = function (data, par) {
with(data, -loglik(p=1-exp(-par[1]*(data[,"carapace.length"] - par[2]*log(par[2]+data[,"carapace.length"]))), data[,"serostatus"]))
}
optim(par=c(0.9, 50), nll.3, method="L-BFGS-B", lower=c(0.1,0), upper=c(1,max(gt1[,"carapace.length"])), data=gt1, hessian=TRUE)
## This is always failing becasue the probability is easily larger than 1 or smaller than 0....
## I think there is something wrong with the CDF formula.
1-exp(-par[1]*(data1[,"carapace.length"] - par[2]*log(par[2]+data1[,"carapace.length"])))
coef(fit.3)
logLik(fit.3)
loglik = function (p, serostatus) {
sum(log(dbinom(x=serostatus,size=1,prob=p)))
}
nll.3 = function (rm, K, carapace.length, serostatus) {
ll <- -loglik(p= 1 - exp(-rm*K*(carapace.length/K - log(1+(carapace.length/K)))), serostatus)
if (!is.finite(ll)) print(c(rm,K,ll))
ll
}
fit.3 = mle2(nll.3, start=list(rm=0.1, K=10),data=gt1, trace=TRUE)
