theme(#panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"),
legend.key = element_blank())
ggplot(data=params.3, aes(x=rm, y=K, z=loglik))+
geom_contour(aes(color=..level..), breaks=breaks.3)+
geom_point(x=coef(fit.3)["rm"], y=coef(fit.3)["K"], shape=3)+
labs(color=expression(log(L)))+
theme_bw()+
theme(#panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"),
legend.key = element_blank())
# Chunk 1
library(plyr)
library(reshape2)
library(magrittr)
library(ggplot2)
library(grid)
library(scales)
library(bbmle)
library(knitr)
theme_set(theme_bw())
# Chunk 2
gt = read.csv("http://kinglab.eeb.lsa.umich.edu/480/data/gophertortoise.csv",
comment.char="#",colClasses=c(date="Date",sex="factor",elisa="factor")) %>%
arrange(carapace.length,date)
gt1 = gt %>%
ddply(~id,subset,date==min(date)) %>%
mutate(serostatus=ifelse(elisa=="neg",0,1))
loglik = function (p, serostatus) {
sum(log(dbinom(x=serostatus,size=1,prob=p)))
}
nll = function (a, b, carapace.length, serostatus) {
-loglik(p=plogis(a+b*carapace.length),serostatus)
}
fit = mle2(nll,start=list(a=0,b=0),data=gt1)
params =
expand.grid(
a=seq(-9,-4,length=100),
b=seq(0.02,0.045,length=100)) %>%
ddply(~a+b,mutate,
loglik=-nll(a,b,gt1$carapace.length,gt1$serostatus)
)
breaks <- logLik(fit)-qchisq(p=c(0.5,0.8,0.9,0.95,0.99,0.999,0.9999),df=2)/2
ggplot(data=params, aes(x=a,y=b,z=loglik))+
stat_contour(aes(color=..level..),breaks=breaks)+
geom_point(x=coef(fit)["a"],y=coef(fit)["b"],shape=3)+
labs(color=expression(log(L)))+
geom_abline(slope=(coef(fit)["b"]/coef(fit)["a"]), intercept=0, col="red", size=1)+
theme_bw()+
theme(#panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"),
legend.key = element_blank())
# Chunk 3
L50 = -(coef(fit)["a"]/coef(fit)["b"])
loglik = function (p, serostatus) {
sum(log(dbinom(x=serostatus,size=1,prob=p)))
}
nll.1 = function (p0, p1, carapace.length, serostatus) {
-loglik(p=plogis(p0+p1*(carapace.length-L50)), serostatus)
}
fit.1 = mle2(nll.1, start=list(p0=0,p1=0),data=gt1)
params.1 =
expand.grid(
p0=seq(coef(fit.1)["p0"]-1.5, coef(fit.1)["p0"]+1.5, length=100),
p1=seq(coef(fit.1)["p1"]-0.15, coef(fit.1)["p1"]+0.15, length=100)) %>%
ddply(~p0+p1, mutate,
loglik=-nll.1(p0, p1, gt1$carapace.length, gt1$serostatus)
)
breaks.1 = logLik(fit.1)-qchisq(p=c(0.5,0.8,0.9,0.95,0.99,0.999,0.9999),df=2)/2
ggplot(data=params.1, aes(x=p0, y=p1, z=loglik))+
geom_contour(aes(color=..level..), breaks=breaks.1)+
geom_point(x=coef(fit.1)["p0"], y=coef(fit.1)["p1"], shape=3)+
labs(color=expression(log(L)))+
theme_bw()+
theme(#panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"),
legend.key = element_blank())
# Chunk 4
curve(1-exp(-(x*0.006)),from=0,to=350, ylab="cumulative probability", main="CDF of exponential distribution")
# Chunk 6
nll.2 = function (lam, carapace.length, serostatus) {
-sum(log(dbinom(x=serostatus, size=1, prob=1-exp(-(carapace.length*lam)))))
}
fit.2 = mle2(nll.2, start=list(lam=0.005),data=gt1)
coef(fit.2)
logLik(fit.2)
# Chunk 7
pfit.2 = profile(fit.2)
confint(fit.2)
plot(pfit.2, main="lambda from PDF modeling")
# Chunk 8
gt1 =
gt1 %>% mutate(
fitted.exp=with(as.list(coef(fit.2)),pexp(carapace.length, rate=lam)),
fitted.low=with(as.list(coef(fit.2)),pexp(carapace.length, rate=confint(fit.2)[1])),
fitted.hi=with(as.list(coef(fit.2)),pexp(carapace.length, rate=confint(fit.2)[2])))
gt1 %>%
ggplot(aes(x=carapace.length))+
geom_point(aes(y=serostatus, color=elisa))+
geom_line(aes(y=fitted.exp, color="fitted"), size=1)+
geom_line(aes(y=fitted.low, color="low"), size=1)+
geom_line(aes(y=fitted.hi, color="hi"), size=1)+
scale_color_manual(name="",
values=c(fitted="blue", neg="grey", pos="black", low="light blue", hi="light blue"),
labels=c(fitted="fitted values", neg="seronegative", pos="seropositive", low="95% CI", hi="95% CI"))+
ggtitle("exponential function")
# Chunk 9
loglik = function (p, serostatus) {
sum(log(dbinom(x=serostatus,size=1,prob=p)))
}
nll.3 = function (rm, K, carapace.length, serostatus) {
-loglik(p= 1 - exp(-rm*K*(carapace.length/K - log(1+(carapace.length/K)))), serostatus)
#if (!is.finite(ll)) print(c(rm,K,ll))
#ll
}
fit.3 = mle2(nll.3, start=list(rm=0.1, K=10),data=gt1, trace=TRUE)
coef(fit.3)
logLik(fit.3)
params.3 =
expand.grid(
rm=seq(0, 0.25, length=100),
K=seq(0, 350, length=100)) %>%
ddply(~rm+K, mutate,
loglik=-nll.3(rm, K, gt1$carapace.length, gt1$serostatus)
)
breaks.3 = logLik(fit.3)-qchisq(p=c(0.5,0.8,0.9,0.95,0.99,0.999,0.9999),df=2)/2
ggplot(data=params.3, aes(x=rm, y=K, z=loglik))+
geom_contour(aes(color=..level..), breaks=breaks.3)+
geom_point(x=coef(fit.3)["rm"], y=coef(fit.3)["K"], shape=3)+
labs(color=expression(log(L)))+
theme_bw()+
theme(#panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"),
legend.key = element_blank())
exp(0.1)
exp(-0.1)
exp(0.012)
exp(-0.012)
K
coef(fit.3)
curve(1-exp(-(x*0.006)),from=0,to=350, ylab="cumulative probability", main="CDF of exponential distribution")
curve(1-exp(-(x*0.013)),from=0,to=350, ylab="cumulative probability", main="CDF of exponential distribution")
gt1 =
gt1 %>% mutate(
fitted.MM1=with(as.list(coef(fit.4)),pexp(carapace.length, rate=rm*(carapace.length/(K+carapace.length)))))
gt1 %>%
ggplot(aes(x=carapace.length))+
geom_point(aes(y=serostatus, color=elisa))+
geom_line(aes(y=fitted.MM1, color="fitted"), size=1)+
scale_color_manual(name="",
values=c(fitted="red", neg="grey", pos="black"),
labels=c(fitted="fitted values", neg="seronegative", pos="seropositive"))+
ggtitle("Exponential-Michaelis_Menten function")
gt1 =
gt1 %>% mutate(
fitted.MM1=with(as.list(coef(fit.3)),pexp(carapace.length, rate=rm*(carapace.length/(K+carapace.length)))))
gt1 %>%
ggplot(aes(x=carapace.length))+
geom_point(aes(y=serostatus, color=elisa))+
geom_line(aes(y=fitted.MM1, color="fitted"), size=1)+
scale_color_manual(name="",
values=c(fitted="red", neg="grey", pos="black"),
labels=c(fitted="fitted values", neg="seronegative", pos="seropositive"))+
ggtitle("Exponential-Michaelis_Menten function")
exp(0.1)
-exp(-0.1)
exp(-0.1)
curve(exp(-(x*0.013)),from=0,to=350, ylab="cumulative probability", main="CDF of exponential distribution")
curve(exp(-(x*0.0065)),from=0,to=350, ylab="cumulative probability", main="CDF of exponential distribution")
curve(1-exp(-(x*0.006)),from=0,to=350,
xlab="carapath length",
ylab="cumulative n/ probability of being sereopositive", main="CDF of exponential distribution")
curve(1-exp(-(x*0.006)),from=0,to=350,
xlab="carapath length",
ylab="cumulative /n probability of being sereopositive", main="CDF of exponential distribution")
curve(1-exp(-(x*0.006)),from=0,to=350,
xlab="carapath length",
ylab="cumulative \n probability of being sereopositive", main="CDF of exponential distribution")
curve(1-exp(-(x*0.006)),from=0,to=350,
xlab="carapath length",
ylab="cumulative probability \n of being sereopositive", main="CDF of exponential distribution")
curve(1-exp(-(x*0.006)),from=0,to=350,
xlab="carapath length",
ylab="cumulative probability n\ of being sereopositive",
main="CDF of exponential distribution")
curve(1-exp(-(x*0.006)),from=0,to=350,
xlab="carapath length",
ylab="cumulative probability" \n "of being sereopositive",
main="CDF of exponential distribution")
curve(1-exp(-(x*0.006)),from=0,to=350,
xlab="carapath length",
ylab="cumulative probability \n of being sereopositive",
main="CDF of exponential distribution")
curve(1-exp(-(x*0.006)),from=0,to=350,
xlab="carapath \n length",
ylab="cumulative probability \n of being sereopositive",
main="CDF of exponential distribution")
curve(1-exp(-(x*0.006)),from=0,to=350,
xlab="carapath length",
ylab="cumulative probability of being sereopositive",
main="CDF of exponential distribution")
curve(1-exp(-(x*0.006)),from=0,to=350,
xlab="carapath length",
ylab="cumulative probability of being sereopositive",
main="CDF of exponential distribution")
loglik = function (p, serostatus) {
sum(log(dbinom(x=serostatus,size=1,prob=p)))
}
nll.4 = function (data, par) {
with(data, -loglik(p=par[1]*(data[,"carapace.length"]/(par[2]+data[,"carapace.length"])), data[,"serostatus"]))
}
fit.4 = optim(par=c(0.1, 50), nll.3, method="L-BFGS-B", lower=c(0,0), upper=c(1,max(gt1[,"carapace.length"])), data=gt1, hessian=TRUE)
p.max=fit.4$par[1]
K=fit.4$par[2]
ML=-fit.4$value
loglik = function (p, serostatus) {
sum(log(dbinom(x=serostatus,size=1,prob=p)))
}
nll.3 = function (data, par) {
with(data, -loglik(p=par[1]*(data[,"carapace.length"]/(par[2]+data[,"carapace.length"])), data[,"serostatus"]))
}
fit.3 = optim(par=c(0.1, 50), nll.3, method="L-BFGS-B", lower=c(0,0), upper=c(1,max(gt1[,"carapace.length"])), data=gt1, hessian=TRUE)
p.max=fit.3$par[1]
K=fit.3$par[2]
ML=-fit.3$value
nll.4 = function (data, par) {
with(data, -loglik(p=par[1]*(data[,"carapace.length"]/(par[2]+data[,"carapace.length"])), data[,"serostatus"]))
}
fit.4 = optim(par=c(0.1, 50), nll.3, method="L-BFGS-B", lower=c(0,0), upper=c(1,max(gt1[,"carapace.length"])), data=gt1, hessian=TRUE)
loglik = function (p, serostatus) {
sum(log(dbinom(x=serostatus,size=1,prob=p)))
}
nll.4 = function (data, par) {
with(data, -loglik(p=par[1]*(data[,"carapace.length"]/(par[2]+data[,"carapace.length"])), data[,"serostatus"]))
}
fit.4 = optim(par=c(0.1, 50), nll.3, method="L-BFGS-B", lower=c(0,0), upper=c(1,max(gt1[,"carapace.length"])), data=gt1, hessian=TRUE)
p.max=fit.4$par[1]
K=fit.4$par[2]
ML=-fit.4$value
round(-(coef(fit)["a"]/coef(fit)["b"]), 3)
params.4 =
expand.grid(
pm=seq(0, 1, length=100),
K=seq(0, 350, length=100)) %>%
ddply(~pm+K, mutate,
loglik=-nll.3(data=gt1, par=c(pm, K))
)
breaks.4 <- -fit.4$value-qchisq(p=c(0.5,0.8,0.9,0.95,0.99,0.999,0.9999),df=2)/2
ggplot(data=params.4, aes(x=pm, y=K, z=loglik))+
geom_contour(aes(color=..level..), breaks=breaks.4)+
geom_point(x=fit.4$par[1], y=fit.4$par[2], shape=3)+
labs(color=expression(log(L)))+
theme_bw()+
theme(#panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"),
legend.key = element_blank())
gt1 =
gt1 %>% mutate(
fitted.MM=fit.3$par[1]*(gt1[,"carapace.length"]/(fit.3$par[2]+gt1[,"carapace.length"])))
gt1 %>%
ggplot(aes(x=carapace.length))+
geom_point(aes(y=serostatus, color=elisa))+
geom_line(aes(y=fitted.MM, color="fitted"), size=1)+
scale_color_manual(name="",
values=c(fitted="red", neg="grey", pos="black"),
labels=c(fitted="fitted values", neg="seronegative", pos="seropositive"))+
ggtitle("Michaelis-Menten function")
curve(1-exp(-(x*0.006)),from=0,to=350,
xlab="carapath length",
ylab="cumulative probability" \n "of being sereopositive",
main="CDF of exponential distribution")
curve(1-exp(-(x*0.006)),from=0,to=350,
xlab="carapath length",
ylab="cumulative probability of being sereopositive",
main="CDF of exponential distribution")
AICtable=data.frame()
for (i in 1:5){
AICtable[i,1] = paste0("Model", i)
}
AICtable[1,2] = round(AIC(fit),3)
AICtable[2,2] = round(AIC(fit.1),3)
AICtable[3,2] = round(AIC(fit.2),3)
AICtable[4,2] = round(AIC(fit.4),3)
AICtable[5,2] = round(2*fit.3$value+2*length(fit.3$par),3)
colnames(AICtable)=c("Model", "AIC value")
kable(AICtable)
AICtable=data.frame()
for (i in 1:5){
AICtable[i,1] = paste0("Model", i)
}
AICtable[1,2] = round(AIC(fit),3)
AICtable[2,2] = round(AIC(fit.1),3)
AICtable[3,2] = round(AIC(fit.2),3)
AICtable[4,2] = round(AIC(fit.3),3)
AICtable[5,2] = round(2*fit.4$value+2*length(fit.4$par),3)
colnames(AICtable)=c("Model", "AIC value")
kable(AICtable)
fit.3
# Chunk 1
library(plyr)
library(reshape2)
library(magrittr)
library(ggplot2)
library(grid)
library(scales)
library(bbmle)
library(knitr)
theme_set(theme_bw())
# Chunk 2
gt = read.csv("http://kinglab.eeb.lsa.umich.edu/480/data/gophertortoise.csv",
comment.char="#",colClasses=c(date="Date",sex="factor",elisa="factor")) %>%
arrange(carapace.length,date)
gt1 = gt %>%
ddply(~id,subset,date==min(date)) %>%
mutate(serostatus=ifelse(elisa=="neg",0,1))
loglik = function (p, serostatus) {
sum(log(dbinom(x=serostatus,size=1,prob=p)))
}
nll = function (a, b, carapace.length, serostatus) {
-loglik(p=plogis(a+b*carapace.length),serostatus)
}
fit = mle2(nll,start=list(a=0,b=0),data=gt1)
params =
expand.grid(
a=seq(-9,-4,length=100),
b=seq(0.02,0.045,length=100)) %>%
ddply(~a+b,mutate,
loglik=-nll(a,b,gt1$carapace.length,gt1$serostatus)
)
breaks <- logLik(fit)-qchisq(p=c(0.5,0.8,0.9,0.95,0.99,0.999,0.9999),df=2)/2
ggplot(data=params, aes(x=a,y=b,z=loglik))+
stat_contour(aes(color=..level..),breaks=breaks)+
geom_point(x=coef(fit)["a"],y=coef(fit)["b"],shape=3)+
labs(color=expression(log(L)))+
geom_abline(slope=(coef(fit)["b"]/coef(fit)["a"]), intercept=0, col="red", size=1)+
theme_bw()+
theme(#panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"),
legend.key = element_blank())
# Chunk 3
L50 = -(coef(fit)["a"]/coef(fit)["b"])
loglik = function (p, serostatus) {
sum(log(dbinom(x=serostatus,size=1,prob=p)))
}
nll.1 = function (p0, p1, carapace.length, serostatus) {
-loglik(p=plogis(p0+p1*(carapace.length-L50)), serostatus)
}
fit.1 = mle2(nll.1, start=list(p0=0,p1=0),data=gt1)
params.1 =
expand.grid(
p0=seq(coef(fit.1)["p0"]-1.5, coef(fit.1)["p0"]+1.5, length=100),
p1=seq(coef(fit.1)["p1"]-0.15, coef(fit.1)["p1"]+0.15, length=100)) %>%
ddply(~p0+p1, mutate,
loglik=-nll.1(p0, p1, gt1$carapace.length, gt1$serostatus)
)
breaks.1 = logLik(fit.1)-qchisq(p=c(0.5,0.8,0.9,0.95,0.99,0.999,0.9999),df=2)/2
ggplot(data=params.1, aes(x=p0, y=p1, z=loglik))+
geom_contour(aes(color=..level..), breaks=breaks.1)+
geom_point(x=coef(fit.1)["p0"], y=coef(fit.1)["p1"], shape=3)+
labs(color=expression(log(L)))+
theme_bw()+
theme(#panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"),
legend.key = element_blank())
# Chunk 4
curve(1-exp(-(x*0.006)),from=0,to=350,
xlab="carapath length",
ylab="cumulative probability of being sereopositive",
main="CDF of exponential distribution")
# Chunk 6
nll.2 = function (lam, carapace.length, serostatus) {
-sum(log(dbinom(x=serostatus, size=1, prob=1-exp(-(carapace.length*lam)))))
}
fit.2 = mle2(nll.2, start=list(lam=0.005),data=gt1)
coef(fit.2)
logLik(fit.2)
# Chunk 7
pfit.2 = profile(fit.2)
confint(fit.2)
plot(pfit.2, main="lambda from PDF modeling")
# Chunk 8
gt1 =
gt1 %>% mutate(
fitted.exp=with(as.list(coef(fit.2)),pexp(carapace.length, rate=lam)),
fitted.low=with(as.list(coef(fit.2)),pexp(carapace.length, rate=confint(fit.2)[1])),
fitted.hi=with(as.list(coef(fit.2)),pexp(carapace.length, rate=confint(fit.2)[2])))
gt1 %>%
ggplot(aes(x=carapace.length))+
geom_point(aes(y=serostatus, color=elisa))+
geom_line(aes(y=fitted.exp, color="fitted"), size=1)+
geom_line(aes(y=fitted.low, color="low"), size=1)+
geom_line(aes(y=fitted.hi, color="hi"), size=1)+
scale_color_manual(name="",
values=c(fitted="blue", neg="grey", pos="black", low="light blue", hi="light blue"),
labels=c(fitted="fitted values", neg="seronegative", pos="seropositive", low="95% CI", hi="95% CI"))+
ggtitle("exponential function")
# Chunk 9
loglik = function (p, serostatus) {
sum(log(dbinom(x=serostatus,size=1,prob=p)))
}
nll.3 = function (rm, K, carapace.length, serostatus) {
-loglik(p= 1 - exp(-rm*K*(carapace.length/K - log(1+(carapace.length/K)))), serostatus)
#if (!is.finite(ll)) print(c(rm,K,ll))
#ll
}
fit.3 = mle2(nll.3, start=list(rm=0.1, K=10),data=gt1, trace=TRUE)
coef(fit.3)
logLik(fit.3)
# Chunk 10
params.3 =
expand.grid(
rm=seq(0, 0.25, length=100),
K=seq(0, 350, length=100)) %>%
ddply(~rm+K, mutate,
loglik=-nll.3(rm, K, gt1$carapace.length, gt1$serostatus)
)
breaks.3 = logLik(fit.3)-qchisq(p=c(0.5,0.8,0.9,0.95,0.99,0.999,0.9999),df=2)/2
ggplot(data=params.3, aes(x=rm, y=K, z=loglik))+
geom_contour(aes(color=..level..), breaks=breaks.3)+
geom_point(x=coef(fit.3)["rm"], y=coef(fit.3)["K"], shape=3)+
labs(color=expression(log(L)))+
theme_bw()+
theme(#panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"),
legend.key = element_blank())
# Chunk 11
gt1 =
gt1 %>% mutate(
fitted.MM=with(as.list(coef(fit.3)),pexp(carapace.length, rate=rm*(carapace.length/(K+carapace.length)))))
gt1 %>%
ggplot(aes(x=carapace.length))+
geom_point(aes(y=serostatus, color=elisa))+
geom_line(aes(y=fitted.MM1, color="fitted"), size=1)+
scale_color_manual(name="",
values=c(fitted="red", neg="grey", pos="black"),
labels=c(fitted="fitted values", neg="seronegative", pos="seropositive"))+
ggtitle("Exponential-Michaelis_Menten function")
# Chunk 12
loglik = function (p, serostatus) {
sum(log(dbinom(x=serostatus,size=1,prob=p)))
}
nll.4 = function (data, par) {
with(data, -loglik(p=par[1]*(data[,"carapace.length"]/(par[2]+data[,"carapace.length"])), data[,"serostatus"]))
}
fit.4 = optim(par=c(0.1, 50), nll.3, method="L-BFGS-B", lower=c(0,0), upper=c(1,max(gt1[,"carapace.length"])), data=gt1, hessian=TRUE)
p.max=fit.4$par[1]
Km=fit.4$par[2]
ML=-fit.4$value
# Chunk 13
params.4 =
expand.grid(
pm=seq(0, 1, length=100),
Km=seq(0, 350, length=100)) %>%
ddply(~pm+Km, mutate,
loglik=-nll.3(data=gt1, par=c(pm, K))
)
breaks.4 <- -fit.4$value-qchisq(p=c(0.5,0.8,0.9,0.95,0.99,0.999,0.9999),df=2)/2
ggplot(data=params.4, aes(x=pm, y=Km, z=loglik))+
geom_contour(aes(color=..level..), breaks=breaks.4)+
geom_point(x=fit.4$par[1], y=fit.4$par[2], shape=3)+
labs(color=expression(log(L)))+
theme_bw()+
theme(#panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"),
legend.key = element_blank())
# Chunk 14
gt1 =
gt1 %>% mutate(
fitted.MM=fit.3$par[1]*(gt1[,"carapace.length"]/(fit.3$par[2]+gt1[,"carapace.length"])))
gt1 %>%
ggplot(aes(x=carapace.length))+
geom_point(aes(y=serostatus, color=elisa))+
geom_line(aes(y=fitted.MM, color="fitted"), size=1)+
scale_color_manual(name="",
values=c(fitted="red", neg="grey", pos="black"),
labels=c(fitted="fitted values", neg="seronegative", pos="seropositive"))+
ggtitle("Michaelis-Menten function")
AICtable=data.frame()
for (i in 1:5){
AICtable[i,1] = paste0("Model", i)
}
AICtable[1,2] = round(AIC(fit),3)
AICtable[2,2] = round(AIC(fit.1),3)
AICtable[3,2] = round(AIC(fit.2),3)
AICtable[4,2] = round(AIC(fit.3),3)
AICtable[5,2] = round(2*fit.4$value+2*length(fit.4$par),3)
colnames(AICtable)=c("Model", "AIC value")
kable(AICtable)
AIC(fit, fit1)
AIC(fit, fit.1)
AIC(fit, fit.1, fit.2, fit.3)
AIC(fit, fit.1, fit.2, fit.3, fit.4)
