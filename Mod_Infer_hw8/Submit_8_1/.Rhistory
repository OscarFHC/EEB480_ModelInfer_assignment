library(plyr)
library(reshape2)
library(magrittr)
library(ggplot2)
library(grid)
library(scales)
library(bbmle)
library(knitr)
theme_set(theme_bw())
gt = read.csv("http://kinglab.eeb.lsa.umich.edu/480/data/gophertortoise.csv",
comment.char="#",colClasses=c(date="Date",sex="factor",elisa="factor")) %>%
arrange(carapace.length,date)
gt1 = gt %>%
ddply(~id,subset,date==min(date)) %>%
mutate(serostatus=ifelse(elisa=="neg",0,1))
loglik = function (p, serostatus) {
sum(log(dbinom(x=serostatus,size=1,prob=p)))
}
nll = function (a, b, carapace.length, serostatus) {
-loglik(p=plogis(a+b*carapace.length),serostatus)
}
fit = mle2(nll,start=list(a=0,b=0),data=gt1)
params =
expand.grid(
a=seq(-9,-4,length=100),
b=seq(0.02,0.045,length=100)) %>%
ddply(~a+b,mutate,
loglik=-nll(a,b,gt1$carapace.length,gt1$serostatus)
)
breaks <- logLik(fit)-qchisq(p=c(0.5,0.8,0.9,0.95,0.99,0.999,0.9999),df=2)/2
ggplot(data=params, aes(x=a,y=b,z=loglik))+
stat_contour(aes(color=..level..),breaks=breaks)+
geom_point(x=coef(fit)["a"],y=coef(fit)["b"],shape=3)+
labs(color=expression(log(L)))+
geom_abline(slope=(coef(fit)["b"]/coef(fit)["a"]), intercept=0, col="red", size=1)+
theme_bw()+
theme(#panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"),
legend.key = element_blank())
L50 = -(coef(fit)["a"]/coef(fit)["b"])
loglik = function (p, serostatus) {
sum(log(dbinom(x=serostatus,size=1,prob=p)))
}
nll.1 = function (p0, p1, carapace.length, serostatus) {
-loglik(p=plogis(p0+p1*(carapace.length-L50)), serostatus)
}
fit.1 = mle2(nll.1, start=list(p0=0,p1=0),data=gt1)
params.1 =
expand.grid(
p0=seq(coef(fit.1)["p0"]-1.5, coef(fit.1)["p0"]+1.5, length=100),
p1=seq(coef(fit.1)["p1"]-0.15, coef(fit.1)["p1"]+0.15, length=100)) %>%
ddply(~p0+p1, mutate,
loglik=-nll.1(p0, p1, gt1$carapace.length, gt1$serostatus)
)
breaks.1 = logLik(fit.1)-qchisq(p=c(0.5,0.8,0.9,0.95,0.99,0.999,0.9999),df=2)/2
ggplot(data=params.1, aes(x=p0, y=p1, z=loglik))+
geom_contour(aes(color=..level..), breaks=breaks.1)+
geom_point(x=coef(fit.1)["p0"], y=coef(fit.1)["p1"], shape=3)+
labs(color=expression(log(L)))+
theme_bw()+
theme(#panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.background = element_blank(),
panel.border=element_rect(color="black"),
legend.key = element_blank())
curve(pexp(x, rate=0.006),from=0,to=350, ylab="cumulative probability", main="CDF of exponential distribution")
nll.2 = function (lam, carapace.length, serostatus) {
-sum(log(dbinom(x=serostatus, size=1, prob=1-exp(-(carapace.length^2*lam)/2))))
}
fit.2 = mle2(nll.2, start=list(lam=0.01),data=gt1)
fit.2 = mle2(nll.2, start=list(lam=0.06),data=gt1)
fit.2 = mle2(nll.2, start=list(lam=0.1),data=gt1)
loglik = function (p, serostatus) {
sum(log(dbinom(x=serostatus,size=1,prob=p)))
}
nll.2 = function (lam, carapace.length, serostatus) {
-loglik(p=pexp(carapace.length, rate=lam), serostatus)
}
fit.2 = mle2(nll.2, start=list(lam=0.01),data=gt1)
fit.2
nll.2 = function (lam, carapace.length, serostatus) {
-sum(log(dbinom(x=serostatus, size=1, prob=1-exp(-(carapace.length^2*lam)/2))))
}
fit.2 = mle2(nll.2, start=list(lam=0.005),data=gt1)
nll.2 = function (lam, carapace.length, serostatus) {
-sum(log(dbinom(x=serostatus, size=1, prob=1-exp(-(carapace.length^2*lam)/2))))
}
fit.2 = mle2(nll.2, start=list(lam=1),data=gt1)
nll.2 = function (lam, carapace.length, serostatus) {
-sum(log(dbinom(x=serostatus, size=1, prob=1-exp(-(carapace.length*lam)))))
}
fit.2 = mle2(nll.2, start=list(lam=0.005),data=gt1)
fit.2
coef(fit.2)
logLik(fit.2)
loglik = function (p, serostatus) {
sum(log(dbinom(x=serostatus,size=1,prob=p)))
}
nll.2 = function (lam, carapace.length, serostatus) {
-loglik(p=pexp(carapace.length, rate=lam), serostatus)
}
fit.2 = mle2(nll.2, start=list(lam=0.01),data=gt1)
coef(fit.2)
logLik(fit.2)
pfit.2 = profile(fit.2)
confint(fit.2)
plot(pfit.2, main="lambda from PDF modeling")
gt1 =
gt1 %>% mutate(
fitted.exp=with(as.list(coef(fit.2)),pexp(carapace.length, rate=lam)))
gt1 %>%
ggplot(aes(x=carapace.length))+
geom_point(aes(y=serostatus, color=elisa))+
geom_line(aes(y=fitted.exp, color="fitted"), size=1)+
scale_color_manual(name="",
values=c(fitted="red", neg="grey", pos="black"),
labels=c(fitted="fitted values", neg="seronegative", pos="seropositive"))+
ggtitle("exponential function")
nll.2 = function (lam, carapace.length, serostatus) {
-sum(log(dbinom(x=serostatus, size=1, prob=1-exp(-(carapace.length*lam)))))
}
fit.2.1 = mle2(nll.2.1, start=list(lam=0.005),data=gt1)
coef(fit.2.1)
logLik(fit.2.1)
nll.2.1 = function (lam, carapace.length, serostatus) {
-sum(log(dbinom(x=serostatus, size=1, prob=1-exp(-(carapace.length*lam)))))
}
fit.2.1 = mle2(nll.2.1, start=list(lam=0.005),data=gt1)
coef(fit.2.1)
logLik(fit.2.1)
pfit.2 = profile(fit.2.1)
confint(fit.2.1)
plot(pfit.2.1, main="lambda from PDF modeling")
pfit.2.1 = profile(fit.2.1)
confint(fit.2.1)
plot(pfit.2.1, main="lambda from PDF modeling")
loglik = function (p, serostatus) {
sum(log(dbinom(x=serostatus,size=1,prob=p)))
}
nll.2 = function (lam, carapace.length, serostatus) {
-loglik(p=pexp(carapace.length, rate=lam), serostatus)
}
fit.2 = mle2(nll.2, start=list(lam=0.01),data=gt1)
coef(fit.2)
logLik(fit.2)
pfit.2 = profile(fit.2)
confint(fit.2)
plot(pfit.2, main="lambda from PDF modeling")
curve(1-exp(-(x*0.006)),from=0,to=350, ylab="cumulative probability", main="CDF of exponential distribution")
curve(pexp(x, rate=0.006),from=0,to=350, ylab="cumulative probability", main="CDF of exponential distribution")
nll.2 = function (lam, carapace.length, serostatus) {
-sum(log(dbinom(x=serostatus, size=1, prob=1-exp(-(carapace.length*lam)))))
}
fit.2 = mle2(nll.2, start=list(lam=0.005),data=gt1)
coef(fit.2)
logLik(fit.2)
nll.2 = function (lam, carapace.length, serostatus) {
-sum(log(dbinom(x=serostatus, size=1, prob=pexp(carapace.length, rate=lam))))
}
# 1-exp(-(carapace.length*lam))
fit.2 = mle2(nll.2, start=list(lam=0.005),data=gt1)
coef(fit.2)
logLik(fit.2)
nll.2 = function (lam, carapace.length, serostatus) {
-sum(log(dbinom(x=serostatus, size=1, prob=1-exp(-(carapace.length*lam)))))
}
fit.2 = mle2(nll.2, start=list(lam=0.005),data=gt1)
coef(fit.2)
logLik(fit.2)
library(plyr)
library(reshape2)
library(magrittr)
library(ggplot2)
library(grid)
library(scales)
library(bbmle)
gt = read.csv("http://kinglab.eeb.lsa.umich.edu/480/data/gophertortoise.csv",
comment.char="#",colClasses=c(date="Date",sex="factor",elisa="factor")) %>%
arrange(carapace.length,date)
gt1 = gt %>%
ddply(~id,subset,date==min(date)) %>%
mutate(serostatus=ifelse(elisa=="neg",0,1))
# The above is just read in data.
# In the following I show how to do
# 1. code everything in single line
loglik = function (p, serostatus) {
sum(log(dbinom(x=serostatus,size=1,prob=p)))
}
nll.2 = function (lam, carapace.length, serostatus) {
-loglik(p=1-exp(-(carapace.length*lam)), serostatus)
}
# The above is to calculate log likelihood in a function and then call the
# funciton in another function that is being optimized (finding the minimum)
nll.2.1 = function (lam, carapace.length, serostatus) {
-sum(log(dbinom(x=serostatus, size=1, prob=1-exp(-(carapace.length*lam)))))
}
# The above is to code everything in one single line.
fit.2 = mle2(nll.2, start=list(lam=0.005),data=gt1)
fit.2.1 = mle2(nll.2.1, start=list(lam=0.005),data=gt1)
loglik = function (p, serostatus) {
sum(log(dbinom(x=serostatus,size=1,prob=p)))
}
nll.3 = function (rm, Kr, carapace.length, serostatus) {
-loglik(p= 1 - exp(rm*(carapace.length - K*log(K+carapace.length))), serostatus)
}
fit.3 = mle2(nll.3, start=list(rm=0.1, Kr=50),data=gt1)
loglik = function (p, serostatus) {
sum(log(dbinom(x=serostatus,size=1,prob=p)))
}
nll.3 = function (rm, K, carapace.length, serostatus) {
-loglik(p= 1 - exp(rm*(carapace.length - K*log(K+carapace.length))), serostatus)
}
fit.3 = mle2(nll.3, start=list(rm=0.1, K=50),data=gt1)
optim(par=c(0.1, 50), nll.3, method="L-BFGS-B", lower=c(0,0), upper=c(1,max(gt1[,"carapace.length"])), data=gt1, hessian=TRUE)
loglik = function (p, serostatus) {
sum(log(dbinom(x=serostatus,size=1,prob=p)))
}
nll.3 = function (data, par) {
with(data, -loglik(p=par[1]*(data[,"carapace.length"]/(par[2]+data[,"carapace.length"])), data[,"serostatus"]))
}
fit.3 = optim(par=c(0.1, 50), nll.3, method="L-BFGS-B", lower=c(0,0), upper=c(1,max(gt1[,"carapace.length"])), data=gt1, hessian=TRUE)
nll.3 = function (data, par) {
with(data, -loglik(p=1-exp(par[1]*(data[,"carapace.length"] - par[2]*log(par[2]+data[,"carapace.length"]))), data[,"serostatus"]))
}
optim(par=c(0.1, 50), nll.3, method="L-BFGS-B", lower=c(0,0), upper=c(1,max(gt1[,"carapace.length"])), data=gt1, hessian=TRUE)
nll.3 = function (data, par) {
with(data, -loglik(p=1-exp(par[1]*(data[,"carapace.length"] - par[2]*log(par[2]+data[,"carapace.length"]))), data[,"serostatus"]))
}
optim(par=c(0.1, 50), nll.3, method="L-BFGS-B", lower=c(0,0), upper=c(1,max(gt1[,"carapace.length"])), data=gt1, hessian=TRUE)
optim(par=c(0.9, 50), nll.3, method="L-BFGS-B", lower=c(0,0), upper=c(1,max(gt1[,"carapace.length"])), data=gt1, hessian=TRUE)
optim(par=c(0.9, 50), nll.3, method="L-BFGS-B", lower=c(0,0), upper=c(1,max(gt1[,"carapace.length"])), data=gt1, hessian=TRUE, trace=TRUE)
?optim
300-50*log(350)
50*log(350)
300-100*log(400)
optim(par=c(0.9, 50), nll.3, method="L-BFGS-B", lower=c(0.000000001,0), upper=c(1,max(gt1[,"carapace.length"])), data=gt1, hessian=TRUE, trace=TRUE)
optim(par=c(0.9, 50), nll.3, method="L-BFGS-B", lower=c(0.000000001,0), upper=c(1,max(gt1[,"carapace.length"])), data=gt1, hessian=TRUE)
optim(par=c(0.9, 50), nll.3, method="L-BFGS-B", lower=c(0.1,0), upper=c(1,max(gt1[,"carapace.length"])), data=gt1, hessian=TRUE)
?ifelse
a=3
a<+0
a<=0
a=0
a<=0
-e100
-e10
-e^10
-exp(10)
exp(1000000)
loglik = function (p, serostatus) {
sum(log(dbinom(x=serostatus,size=1,prob=p)))
}
nll.3 = function (rm, K, carapace.length, serostatus) {
ifelse(rm<=0, exp(1000000), -loglik(p= 1 - exp(rm*(carapace.length - K*log(K+carapace.length))), serostatus))
}
fit.3 = mle2(nll.3, start=list(rm=0.1, K=50),data=gt1)
dbinom(3, size=1, prob=0)
nll.3 = function (rm, K, carapace.length, serostatus) {
ifelse(rm<=0, exp(1000000), -loglik(p= 1 - exp(rm*(carapace.length - K*log(K+carapace.length))), serostatus))
}
fit.3 = mle2(nll.3, start=list(rm=0.9, K=50),data=gt1)
loglik = function (p, serostatus) {
sum(log(dbinom(x=serostatus,size=1,prob=p)))
}
nll.3 = function (rm, K, carapace.length, serostatus) {
ifelse(rm<=0, exp(1000000), -loglik(p= 1 - exp(rm*(carapace.length - K*log(K+carapace.length))), serostatus))
}
loglik = function (p, serostatus) {
sum(log(dbinom(x=serostatus,size=1,prob=p)))
}
nll.3 = function (rm, K, carapace.length, serostatus) {
ifelse(rm<=0|rm>1, exp(1000000), -loglik(p= 1 - exp(rm*(carapace.length - K*log(K+carapace.length))), serostatus))
}
fit.3 = mle2(nll.3, start=list(rm=1, K=50),data=gt1)
mle2(nll.3, start=list(rm=1, K=100),data=gt1)
mle2(nll.3, start=list(rm=1, K=150),data=gt1)
mle2(nll.3, start=list(rm=0.6, K=150),data=gt1)
mle2(nll.3, start=list(rm=0.6, K=125),data=gt1)
mle2(nll.3, start=list(rm=1, K=100),data=gt1, trace=TRUE)
View(gt1)
mle2(nll.3, start=list(rm=1, K=2),data=gt1, trace=TRUE)
mle2(nll.3, start=list(rm=1, K=50),data=gt1, trace=TRUE)
mle2(nll.3, start=list(rm=1, K=100),data=gt1, trace=TRUE)
mle2(nll.3, start=list(rm=1, K=500),data=gt1, trace=TRUE)
mle2(nll.3, start=list(rm=0.5, K=200),data=gt1, trace=TRUE)
nll.3 = function (rm, K, carapace.length, serostatus) {
ifelse(rm>0 && rm<=1, exp(1000000), -loglik(p= 1 - exp(rm*(carapace.length - K*log(K+carapace.length))), serostatus))
}
fit.3 = mle2(nll.3, start=list(rm=1, K=100),data=gt1, trace=TRUE)
gt1=data1
data1=gt1
-loglik(p=1-exp(par[1]*(data1[,"carapace.length"] - par[2]*log(par[2]+data1[,"carapace.length"]))), data1[,"serostatus"])
par=c(1, 50)
-loglik(p=1-exp(par[1]*(data1[,"carapace.length"] - par[2]*log(par[2]+data1[,"carapace.length"]))), data1[,"serostatus"])
par[1]
1-exp(par[1]*(data1[,"carapace.length"] - par[2]*log(par[2]+data1[,"carapace.length"])))
1--8.879621e+04
1-8.879621e+04
8.879621e+04
data1[58,]
1-exp(par[1]*(305 - par[2]*log(par[2]+305)))
par[2]
305-50*log(400)
exp(par[1]*(305 - par[2]*log(par[2]+305)))
exp(305-50*log(400))
exp(305-50*log(355))
dbinom(3, size=1, p=3)
nll.3 = function (data, par) {
with(data, -loglik(p=1-exp(-par[1]*(data[,"carapace.length"] - par[2]*log(par[2]+data[,"carapace.length"]))), data[,"serostatus"]))
}
optim(par=c(0.9, 50), nll.3, method="L-BFGS-B", lower=c(0.1,0), upper=c(1,max(gt1[,"carapace.length"])), data=gt1, hessian=TRUE)
exp(-par[1]*(305 - par[2]*log(par[2]+305)))
1-exp(-par[1]*(data1[,"carapace.length"] - par[2]*log(par[2]+data1[,"carapace.length"])))
which(1-exp(-par[1]*(data1[,"carapace.length"] - par[2]*log(par[2]+data1[,"carapace.length"])))>1)
which(1-exp(-par[1]*(data1[,"carapace.length"] - par[2]*log(par[2]+data1[,"carapace.length"])))<0)
191.86*2
-par[1]*(data1[,"carapace.length"] - par[2]*log(par[2]+data1[,"carapace.length"]))
par[1]*(data1[,"carapace.length"] - par[2]*log(par[2]+data1[,"carapace.length"]))
exp(par[1]*(data1[,"carapace.length"] - par[2]*log(par[2]+data1[,"carapace.length"])))
1-exp(par[1]*(data1[,"carapace.length"] - par[2]*log(par[2]+data1[,"carapace.length"])))
-par[1]*(data[,"carapace.length"] - par[2]*log(par[2]+data[,"carapace.length"]))
-par[1]*(data1[,"carapace.length"] - par[2]*log(par[2]+data1[,"carapace.length"]))
1-exp(-par[1]*(data1[,"carapace.length"] - par[2]*log(par[2]+data1[,"carapace.length"])))
par=c(1, 3)
1-exp(-par[1]*(data1[,"carapace.length"] - par[2]*log(par[2]+data1[,"carapace.length"])))
par=c(1, 10)
1-exp(-par[1]*(data1[,"carapace.length"] - par[2]*log(par[2]+data1[,"carapace.length"])))
par=c(1, 20)
1-exp(-par[1]*(data1[,"carapace.length"] - par[2]*log(par[2]+data1[,"carapace.length"])))
optim(par=c(0.9, 50), nll.3, method="L-BFGS-B", lower=c(0.1,0), upper=c(1,10)), data=gt1, hessian=TRUE)
optim(par=c(0.9, 50), nll.3, method="L-BFGS-B", lower=c(0.1,0), upper=c(1,10), data=gt1, hessian=TRUE)
optim(par=c(0.9, 5), nll.3, method="L-BFGS-B", lower=c(0.1,0), upper=c(1,10), data=gt1, hessian=TRUE)
optim(par=c(1, 1), nll.3, method="L-BFGS-B", lower=c(0.1,0), upper=c(1,10), data=gt1, hessian=TRUE)
optim(par=c(1, 1), nll.3, method="L-BFGS-B", lower=c(0,0), upper=c(1,5), data=gt1, hessian=TRUE)
optim(par=c(1, 1), nll.3, method="L-BFGS-B", lower=c(0.000001,0), upper=c(1,5), data=gt1, hessian=TRUE)
nll.3 = function (rm, K, carapace.length, serostatus) {
ifelse(rm>0 && rm<=1, exp(1000000), -loglik(p= 1 - exp(-rm*(carapace.length - K*log(K+carapace.length))), serostatus))
}
optim(par=c(1, 1), nll.3, method="L-BFGS-B", lower=c(0.000001,0), upper=c(1,5), data=gt1, hessian=TRUE)
nll.3 = function (data, par) {
with(data, -loglik(p=1-exp(-par[1]*(data[,"carapace.length"] - par[2]*log(par[2]+data[,"carapace.length"]))), data[,"serostatus"]))
}
optim(par=c(1, 1), nll.3, method="L-BFGS-B", lower=c(0.000001,0), upper=c(1,5), data=gt1, hessian=TRUE)
nll.3 = function (rm, K, carapace.length, serostatus) {
ifelse(rm>0 && rm<=1, exp(1000000), -loglik(p= 1 - exp(-rm*(carapace.length - K*log(K+carapace.length))), serostatus))
}
fit.3 = mle2(nll.3, start=list(rm=1, K=10),data=gt1, trace=TRUE)
fit.3 = mle2(nll.3, start=list(rm=0.1, K=10),data=gt1, trace=TRUE)
